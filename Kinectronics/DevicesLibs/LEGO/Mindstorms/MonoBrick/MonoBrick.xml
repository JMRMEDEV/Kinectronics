<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoBrick</name>
    </assembly>
    <members>
        <member name="T:MonoBrick.BrickCommand">
            <summary>
            Class for creating a command
            </summary>
        </member>
        <member name="F:MonoBrick.BrickCommand.dataArr">
            <summary>
            A list that holds the data bytes of the command
            </summary>
        </member>
        <member name="F:MonoBrick.BrickCommand.replyRequired">
            <summary>
            Does the command require a reply
            </summary>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.Boolean)">
            <summary>
            Append a bool value
            </summary>
            <param name="b">
            The bool value to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.String)">
            <summary>
            Append a string
            </summary>
            <param name="s">
            The string to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.String,System.Int32,System.Boolean)">
            <summary>
            Append a string
            </summary>
            <param name="s">
            The string to append
            </param>
            <param name="maxSize">
            The maximum size to append
            </param>
            <param name="padWithZero">
            If set to <c>true</c> and string length is less that maxsize the remaining bytes will be padded with zeros
            If set to <c>false</c> and string length is less that maxsize no padding will be added
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.Byte)">
            <summary>
            Append a byte
            </summary>
            <param name="b">
            The byte value to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.SByte)">
            <summary>
            Append a signed byte
            </summary>
            <param name="b">
            The signed byte to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.UInt16)">
            <summary>
            Append a UInt16
            </summary>
            <param name="data">
            The UInt16 to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.Int16)">
            <summary>
            Append a Int16
            </summary>
            <param name="data">
            The Int16 to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.UInt32)">
            <summary>
            Append a UInt32
            </summary>
            <param name="data">
            The UInt32 to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.Int32)">
            <summary>
            Append a Int32
            </summary>
            <param name="data">
            The Int32 to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.Single)">
            <summary>
            Append a float
            </summary>
            <param name="data">
            The float to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.Byte[])">
            <summary>
            Append a byte array
            </summary>
            <param name="data">
            The array to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.Byte[],System.Int32)">
            <summary>
            Append a byte array
            </summary>
            <param name="data">
            The array to append
            </param>
            <param name="offset">
            The byte array offset
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.Append(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Append a byte array
            </summary>
            <param name="data">
            The array to append
            </param>
            <param name="offset">
            The byte array offset
            </param>
            <param name="length">
            The length to append
            </param>
        </member>
        <member name="M:MonoBrick.BrickCommand.AppendZeros(System.Int32)">
            <summary>
            Appends zeros
            </summary>
            <param name="zeros">
            Number of zeros to append
            </param>
        </member>
        <member name="P:MonoBrick.BrickCommand.ReplyRequired">
            <summary>
            Gets a value indicating whether a reply is required.
            </summary>
            <value>
                <c>true</c> if reply required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoBrick.BrickCommand.Data">
            <summary>
            Gets byte array of the command
            </summary>
            <value>
            The command data
            </value>
        </member>
        <member name="P:MonoBrick.BrickCommand.Length">
            <summary>
            Gets the length of the command
            </summary>
            <value>
            The length of the command
            </value>
        </member>
        <member name="T:MonoBrick.BrickReply">
            <summary>
            Class holding a reply from the brick
            </summary>
        </member>
        <member name="F:MonoBrick.BrickReply.dataArray">
            <summary>
            The data array used for the reply
            </summary>
        </member>
        <member name="M:MonoBrick.BrickReply.SetData(System.Byte[])">
            <summary>
            Set the payload data of the reply
            </summary>
            <param name="data">Data.</param>
        </member>
        <member name="P:MonoBrick.BrickReply.Length">
            <summary>
            Gets the length
            </summary>
            <value>
            The length of
            </value>
        </member>
        <member name="P:MonoBrick.BrickReply.Item(System.Int32)">
            <summary>
            Gets the data byte at i.
            </summary>
            <param name="i">
            The index of the byte
            </param>
        </member>
        <member name="P:MonoBrick.BrickReply.Data">
            <summary>
            Read the data of the reply
            </summary>
            <value>
            The byte array containing data
            </value>
        </member>
        <member name="M:MonoBrick.BrickReply.GetString(System.Byte)">
            <summary>
            Read a string
            </summary>
            <returns>
            A string
            </returns>
            <param name="offset">
            Where to start reading
            </param>
        </member>
        <member name="M:MonoBrick.BrickReply.GetString(System.Byte,System.Byte)">
            <summary>
            Read a string
            </summary>
            <returns>
            A string
            </returns>
            <param name="offset">
            Where to start reading
            </param>
            <param name="length">
            Length of the string to read
            </param>
        </member>
        <member name="M:MonoBrick.BrickReply.GetData(System.Int32)">
            <summary>
            Gets raw command bytes
            </summary>
            <returns>
            The raw bytes that make up the command
            </returns>
            <param name="offset">
            Offset
            </param>
        </member>
        <member name="M:MonoBrick.BrickReply.GetSbyte(System.Int32)">
            <summary>
            Read a signed byte
            </summary>
            <returns>
            A signed byte
            </returns>
            <param name="offset">
            Where to start reading
            </param>
        </member>
        <member name="M:MonoBrick.BrickReply.GetByte(System.Int32)">
            <summary>
            Read a byte
            </summary>
            <returns>
            The byte.
            </returns>
            <param name="offset">
            Where to start reading
            </param>
        </member>
        <member name="M:MonoBrick.BrickReply.GetUInt16(System.Int32)">
            <summary>
            Read a UInt16
            </summary>
            <returns>
            A UInt16
            </returns>
            <param name="offset">
            Where to start reading
            </param>
        </member>
        <member name="M:MonoBrick.BrickReply.GetInt16(System.Int32)">
            <summary>
            Read a Int16
            </summary>
            <returns>
            A Int16
            </returns>
            <param name="offset">
            Where to start reading
            </param>
        </member>
        <member name="M:MonoBrick.BrickReply.GetUInt32(System.Int32)">
            <summary>
            Read a UInt32
            </summary>
            <returns>
            A UInt32
            </returns>
            <param name="offset">
            Where to start reading
            </param>
        </member>
        <member name="M:MonoBrick.BrickReply.GetInt32(System.Int32)">
            <summary>
            Read a Int32
            </summary>
            <returns>
            A Int32
            </returns>
            <param name="offset">
            Where to start reading
            </param>
        </member>
        <member name="M:MonoBrick.BrickReply.GetFloat(System.Int32)">
            <summary>
            Read a float
            </summary>
            <returns>
            A float
            </returns>
            <param name="offset">
            Where to start reading
            </param>
        </member>
        <member name="T:MonoBrick.TunnelError">
            <summary>
            Tunnel error codes
            </summary>
        </member>
        <member name="T:MonoBrick.ConnectionError">
            <summary>
            Connection error codes
            </summary>
        </member>
        <member name="T:MonoBrick.MonoBrickException">
            <summary>
            Base class for all exceptions
            </summary>
        </member>
        <member name="P:MonoBrick.MonoBrickException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <value>
            The error code
            </value>
        </member>
        <member name="M:MonoBrick.MonoBrickException.#ctor(System.String,System.Byte)">
            <summary>
            Initializes a new instance of <see cref="T:MonoBrick.MonoBrickException" /></summary>
            <param name="description">
            Description of error
            </param>
            <param name="code">
            Error code
            </param>
        </member>
        <member name="M:MonoBrick.MonoBrickException.#ctor(System.String,System.Exception,System.Byte)">
            <summary>
            Initializes a new instance of <see cref="T:MonoBrick.MonoBrickException" /></summary>
            <param name="description">
            Description of error
            </param>
            <param name="e">
            Child exception
            </param>
            <param name="code">
            Error code
            </param>
        </member>
        <member name="T:MonoBrick.ConnectionException">
            <summary>
            Connection exception.
            </summary>
        </member>
        <member name="M:MonoBrick.ConnectionException.#ctor(MonoBrick.ConnectionError)">
            <summary>
            Initializes a new instance of <see cref="T:MonoBrick.ConnectionException" /></summary>
            <param name="error">
            A connection error
            </param>
        </member>
        <member name="M:MonoBrick.ConnectionException.#ctor(MonoBrick.ConnectionError,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:MonoBrick.ConnectionException" /></summary>
            <param name="error">
            A connection error
            </param>
            <param name="inner">
            Inner exception
            </param>
        </member>
        <member name="T:MonoBrick.TunnelException">
            <summary>
            Exceptions from tunnel
            </summary>
        </member>
        <member name="M:MonoBrick.TunnelException.#ctor(MonoBrick.TunnelError)">
            <summary>
            Initializes a new instance of <see cref="T:MonoBrick.TunnelException" /></summary>
            <param name="error">
            Tunnel error
            </param>
        </member>
        <member name="M:MonoBrick.TunnelException.#ctor(MonoBrick.TunnelError,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:MonoBrick.TunnelException" /></summary>
            <param name="error">
            Tunnel error
            </param>
            <param name="inner">
            Inner exception
            </param>
        </member>
        <member name="T:MonoBrick.FileType">
            <summary>
            File types
            </summary>
        </member>
        <member name="T:MonoBrick.IBrickFile">
            <summary>
            Interface for a file placed on the brick
            </summary>
        </member>
        <member name="P:MonoBrick.IBrickFile.Name">
            <summary>
            Gets the name of the file
            </summary>
            <value>The name of the file</value>
        </member>
        <member name="P:MonoBrick.IBrickFile.Size">
            <summary>
            Gets the size of the file in bytes
            </summary>
            <value>The size of the file in bytes</value>
        </member>
        <member name="P:MonoBrick.IBrickFile.Extension">
            <summary>
            Gets the file extension
            </summary>
            <value>The file extension.</value>
        </member>
        <member name="P:MonoBrick.IBrickFile.FileType">
            <summary>
            Gets the file type
            </summary>
            <value>The file type</value>
        </member>
        <member name="T:MonoBrick.Connection`2">
            <summary>
            Abstract class for a brick connection
            </summary>
        </member>
        <member name="E:MonoBrick.Connection`2.Connected">
            <summary>
            Occurs when connected.
            </summary>
        </member>
        <member name="E:MonoBrick.Connection`2.Disconnected">
            <summary>
            Occurs when disconnected.
            </summary>
        </member>
        <member name="E:MonoBrick.Connection`2.CommandSend">
            <summary>
            Occurs when command is send.
            </summary>
        </member>
        <member name="E:MonoBrick.Connection`2.ReplyReceived">
            <summary>
            Occurs when reply is received.
            </summary>
        </member>
        <member name="F:MonoBrick.Connection`2.isConnected">
            <summary>
            </summary>
        </member>
        <member name="P:MonoBrick.Connection`2.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value>
                <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoBrick.Connection`2.Send(`0)">
            <summary>
            Send the specified command.
            </summary>
            <param name="command">
            Command.
            </param>
        </member>
        <member name="M:MonoBrick.Connection`2.Receive">
            <summary>
            Receive a reply
            </summary>
        </member>
        <member name="M:MonoBrick.Connection`2.SendAndReceive(`0)">
            <summary>
            Send and receive a reply
            </summary>
            <returns>
            The reply
            </returns>
            <param name="command">
            The command to send
            </param>
        </member>
        <member name="M:MonoBrick.Connection`2.ConnectionWasOpened">
            <summary>
            Fires an event when the connection is opened
            </summary>
        </member>
        <member name="M:MonoBrick.Connection`2.ConnectionWasClosed">
            <summary>
            Fires an event when the connection is closed
            </summary>
        </member>
        <member name="M:MonoBrick.Connection`2.ReplyWasReceived(`1)">
            <summary>
            Fires an event when a reply is received
            </summary>
            <param name="reply">
            Reply that was received
            </param>
        </member>
        <member name="M:MonoBrick.Connection`2.CommandWasSend(`0)">
            <summary>
            Fires the event CommandSend when a command is send
            </summary>
            <param name="command">
            The command that was send
            </param>
        </member>
        <member name="M:MonoBrick.Connection`2.Open">
            <summary>
            Open the connection
            </summary>
        </member>
        <member name="M:MonoBrick.Connection`2.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="T:MonoBrick.BrickType">
            <summary>
            Brick type
            </summary>
        </member>
        <member name="F:MonoBrick.BrickType.NXT">
            <summary>
            NXT Brick.
            </summary>
        </member>
        <member name="F:MonoBrick.BrickType.EV3">
            <summary>
            EV3 brick.
            </summary>
        </member>
        <member name="T:MonoBrick.MonoBrickHelper">
            <summary>
            Mono brick helper.
            </summary>
        </member>
        <member name="T:MonoBrick.MonoBrickHelper.Platform">
            <summary>
            Platform enumeration
            </summary>
        </member>
        <member name="F:MonoBrick.MonoBrickHelper.Platform.Windows">
            <summary>
            Windows.
            </summary>
        </member>
        <member name="F:MonoBrick.MonoBrickHelper.Platform.Linux">
            <summary>
            Linux.
            </summary>
        </member>
        <member name="F:MonoBrick.MonoBrickHelper.Platform.Mac">
            <summary>
            Mac OS.
            </summary>
        </member>
        <member name="M:MonoBrick.MonoBrickHelper.RunningPlatform">
            <summary>
            Get the operating system
            </summary>
            <returns>The platform.</returns>
        </member>
        <member name="T:MonoBrick.NetworkExtensions">
            <summary>
            Network extensions
            </summary>
        </member>
        <member name="M:MonoBrick.NetworkExtensions.ReadAll(System.Net.Sockets.NetworkStream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Wait for all bytes to be read
            </summary>
            <returns>
            The number of bytes read
            </returns>
            <param name="stream">
            A network stream
            </param>
            <param name="buf">
            Buffer to store bytes that was read in
            </param>
            <param name="offset">
            Byte array offset
            </param>
            <param name="length">
            Length of bytes to read
            </param>
        </member>
        <member name="M:MonoBrick.NetworkExtensions.ReadAll(System.Net.Sockets.NetworkStream,System.Byte[])">
            <summary>
            Wait for all bytes to be read
            </summary>
            <returns>
            The number of bytes read
            </returns>
            <param name="stream">
            A network stream
            </param>
            <param name="buf">
            Buffer to store bytes that was read in the number of bytes to read is determined by the length of the buffer
            </param>
        </member>
        <member name="M:MonoBrick.NetworkExtensions.ReadLine(System.Net.Sockets.NetworkStream)">
            <summary>
            Reads a line from a network stream
            </summary>
            <returns>
            The line that was read
            </returns>
            <param name="stream">
            Stream to read from
            </param>
        </member>
        <member name="T:MonoBrick.NetworkConnection`2">
            <summary>
            Abstract class for creating a Network connection
            </summary>
        </member>
        <member name="F:MonoBrick.NetworkConnection`2.stream">
            <summary>
            The network stream to use for communication.
            </summary>
        </member>
        <member name="M:MonoBrick.NetworkConnection`2.Open">
            <summary>
            Open the connection or wait for tunnel
            </summary>
        </member>
        <member name="M:MonoBrick.NetworkConnection`2.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="M:MonoBrick.NetworkConnection`2.Receive">
            <summary>
            Receive a reply
            </summary>
        </member>
        <member name="M:MonoBrick.NetworkConnection`2.Send(`0)">
            <summary>
            Send a command.
            </summary>
            <param name="command">
            The command to send
            </param>
        </member>
        <member name="T:MonoBrick.TunnelConnection`2">
            <summary>
            Class for creating a tunnel connection
            </summary>
        </member>
        <member name="M:MonoBrick.TunnelConnection`2.#ctor(System.UInt16)">
            <summary>
            Initializes a tunnel connection where the connection waits for a tunnel to connect
            </summary>
            <param name="port">
            The port to listen for incomming connections from a tunnel
            </param>
        </member>
        <member name="M:MonoBrick.TunnelConnection`2.#ctor(System.String,System.UInt16)">
            <summary>
            Initializes a tunnel connection where the bricks connects to a tunnel
            </summary>
            <param name="ipAddress">
            IP address.
            </param>
            <param name="port">
            Port
            </param>
        </member>
        <member name="M:MonoBrick.TunnelConnection`2.Open">
            <summary>
            Open the connection or wait for tunnel
            </summary>
        </member>
        <member name="M:MonoBrick.TunnelConnection`2.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="T:MonoBrick.WiFiConnection`2">
            <summary>
            Network connection
            </summary>
        </member>
        <member name="M:MonoBrick.WiFiConnection`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Wifi connection
            </summary>
            <param name="connectionTimeoutMs">Time out when trying to connect if set to zero wait forever</param>
        </member>
        <member name="M:MonoBrick.WiFiConnection`2.Open">
            <summary>
            Open the connection to the EV3 over a WiFi connection - this will block
            </summary>
        </member>
        <member name="M:MonoBrick.WiFiConnection`2.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="T:MonoBrick.LegoUsbConstants">
            <summary>
            Lego usb constants.
            </summary>
        </member>
        <member name="F:MonoBrick.LegoUsbConstants.NXTProductId">
            <summary>
            The NXT product identifier.
            </summary>
        </member>
        <member name="F:MonoBrick.LegoUsbConstants.VendorId">
            <summary>
            The vendor identifier.
            </summary>
        </member>
        <member name="F:MonoBrick.LegoUsbConstants.EV3ProductId">
            <summary>
            The EV3 product identifier.
            </summary>
        </member>
        <member name="T:MonoBrick.USB`2">
            <summary>
            Class used for USB communication on both NXT and EV3. Wraps all other USB classes
            </summary>
        </member>
        <member name="M:MonoBrick.USB`2.#ctor">
            <summary>
            Initializes a new instance of the USB class.
            </summary>
        </member>
        <member name="M:MonoBrick.USB`2.Open">
            <summary>
            Open the connection
            </summary>
        </member>
        <member name="M:MonoBrick.USB`2.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="M:MonoBrick.USB`2.Send(`0)">
            <summary>
            Send the specified command.
            </summary>
            <param name="command">
            Command to send
            </param>
        </member>
        <member name="M:MonoBrick.USB`2.Receive">
            <summary>
            Receive a reply
            </summary>
        </member>
        <member name="T:MonoBrick.HidApiNative">
            <summary>
            Hid API native functions. This is placed in a separate class to satisfy Windows compiler since Dll import does not work with generics
            </summary>
        </member>
        <member name="T:MonoBrick.HidLib`2">
            <summary>
            Class used for HID USB communication on MAC OS and Windows. Used for the EV3
            </summary>
        </member>
        <member name="M:MonoBrick.HidLib`2.#ctor(System.Int16,System.Int16,System.Boolean)">
            <summary>
            Initializes a new instance of the HID Lib class.
            </summary>
            <param name="vendorId">Vendor identifier.</param>
            <param name="productId">Product identifier.</param>
            <param name="addReportId">If set to <c>true</c> report id 0x00 will be added when seding data.</param>
        </member>
        <member name="M:MonoBrick.HidLib`2.Open">
            <summary>
            Open the connection
            </summary>
        </member>
        <member name="M:MonoBrick.HidLib`2.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="M:MonoBrick.HidLib`2.Send(`0)">
            <summary>
            Send the specified command.
            </summary>
            <param name="command">
            Command to send
            </param>
        </member>
        <member name="M:MonoBrick.HidLib`2.Receive">
            <summary>
            Receive a reply
            </summary>
        </member>
        <member name="T:MonoBrick.LibUsb`2">
            <summary>
            LibUsb is a library for WinUsb, libusb-win32, and Linux libusb v1.x developers. This is used for Linux and Windows support for the NXT
            </summary>
        </member>
        <member name="M:MonoBrick.LibUsb`2.#ctor(System.Int16,System.Int16,LibUsbDotNet.Main.ReadEndpointID,LibUsbDotNet.Main.WriteEndpointID)">
            <summary>
            Initializes a new instance of the LIB USB class.
            </summary>
            <param name="vendorId">Vendor identifier.</param>
            <param name="productId">Product identifier.</param>
            <param name="readId">Read identifier.</param>
            <param name="writeId">Write identifier.</param>
        </member>
        <member name="M:MonoBrick.LibUsb`2.Open">
            <summary>
            Open the connection
            </summary>
        </member>
        <member name="M:MonoBrick.LibUsb`2.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="M:MonoBrick.LibUsb`2.Send(`0)">
            <summary>
            Send the specified command.
            </summary>
            <param name="command">
            Command to send
            </param>
        </member>
        <member name="M:MonoBrick.LibUsb`2.Receive">
            <summary>
            Receive a reply
            </summary>
        </member>
        <member name="T:MonoBrick.MonoLibUsb`2">
            <summary>
            The MonoLibUsb is a complete implementation of Libusb-1.0. This is used on Mac OS for the NXT and on Windows and Linux for the EV3
            </summary>
        </member>
        <member name="M:MonoBrick.MonoLibUsb`2.#ctor(MonoBrick.MonoLibUsbSettings,System.Boolean,MonoBrick.BrickType)">
            <summary>
            Create a instance of MonoLibUSB
            </summary>
            <param name="settings">Settings to use</param>
            <param name="addLength">If set to <c>true</c> add length to the message</param>
            <param name="type">Brick type to use</param>
        </member>
        <member name="M:MonoBrick.MonoLibUsb`2.Open">
            <summary>
            Open the connection
            </summary>
        </member>
        <member name="M:MonoBrick.MonoLibUsb`2.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="M:MonoBrick.MonoLibUsb`2.Send(`0)">
            <summary>
            Send the specified command.
            </summary>
            <param name="command">
            Command to send
            </param>
        </member>
        <member name="M:MonoBrick.MonoLibUsb`2.Receive">
            <summary>
            Receive a reply
            </summary>
        </member>
        <member name="T:MonoBrick.MonoLibUsbSettings">
            <summary>
            Mono lib USB settings.
            </summary>
        </member>
        <member name="M:MonoBrick.MonoLibUsbSettings.#ctor(System.Int16,System.Int16,System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.MonoLibUsbSettings" /> class.
            </summary>
            <param name="vendorID">Vendor I.</param>
            <param name="productId">Product identifier.</param>
            <param name="readEndPoint">Read end point.</param>
            <param name="writeEndPoint">Write end point.</param>
            <param name="usbInterface">Usb interface.</param>
            <param name="usbConfiguration">Usb configuration.</param>
        </member>
        <member name="P:MonoBrick.MonoLibUsbSettings.ReadEndPoint">
            <summary>
            Gets the read end point.
            </summary>
            <value>The read end point.</value>
        </member>
        <member name="P:MonoBrick.MonoLibUsbSettings.WriteEndPoint">
            <summary>
            Gets the write end point.
            </summary>
            <value>The write end point.</value>
        </member>
        <member name="P:MonoBrick.MonoLibUsbSettings.Interface">
            <summary>
            Gets the interface.
            </summary>
            <value>The interface.</value>
        </member>
        <member name="P:MonoBrick.MonoLibUsbSettings.Configuration">
            <summary>
            Gets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:MonoBrick.MonoLibUsbSettings.VendorId">
            <summary>
            Gets the vendor identifier.
            </summary>
            <value>The vendor identifier.</value>
        </member>
        <member name="P:MonoBrick.MonoLibUsbSettings.ProductId">
            <summary>
            Gets the product identifier.
            </summary>
            <value>The product identifier.</value>
        </member>
        <member name="T:MonoBrick.EV3.Brick`4">
            <summary>
            Class for creating a EV3 brick
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.Mailbox">
            <summary>
            Manipulate memory on the EV3
            </summary>
            <value>The memory.</value>
            <summary>
            Message system used to write and read data to/from the brick
            </summary>
            <value>
            The message system
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.MotorA">
            <summary>
            Motor A
            </summary>
            <value>
            The motor connected to port A
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.MotorB">
            <summary>
            Motor B
            </summary>
            <value>
            The motor connected to port B
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.MotorC">
            <summary>
            Motor C
            </summary>
            <value>
            The motor connected to port C
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.MotorD">
            <summary>
            Motor D
            </summary>
            <value>
            The motor connected to port D
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.MotorSync">
            <summary>
            Synchronise two motors
            </summary>
            <value>The motor sync.</value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.Vehicle">
            <summary>
            Use the brick as a vehicle
            </summary>
            <value>
            The vehicle
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.Sensor1">
            <summary>
            Gets or sets the sensor connected to port 1
            </summary>
            <value>
            The sensor connected to port 1
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.Sensor2">
            <summary>
            Gets or sets the sensor connected to port 2
            </summary>
            <value>
            The sensor connected to port 2
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.Sensor3">
            <summary>
            Gets or sets the sensor connected to port 3
            </summary>
            <value>
            The sensor connected to port 3
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.Sensor4">
            <summary>
            Gets or sets the sensor connected to port 4
            </summary>
            <value>
            The sensor connected to port 4
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.FileSystem">
            <summary>
            The file system
            </summary>
            <value>
            The file system
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Brick`4.Connection">
            <summary>
            Gets the connection that the brick uses
            </summary>
            <value>
            The connection
            </value>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.#ctor(MonoBrick.Connection{MonoBrick.EV3.Command,MonoBrick.EV3.Reply})">
            <summary>
            Initializes a new instance of the Brick class.
            </summary>
            <param name="connection">
            Connection to use
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Brick class with bluetooth, usb or WiFi connection
            </summary>
            <param name="connection">
            Can either be a serial port name for bluetooth connection or "usb" for usb connection and finally "wiFi" for WiFi connection
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.#ctor(System.String,System.UInt16)">
            <summary>
            Initializes a new instance of the Brick class with a tunnel connection
            </summary>
            <param name="ipAddress">
            The IP address to use
            </param>
            <param name="port">
            The port number to use
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.StartProgram(MonoBrick.EV3.BrickFile)">
            <summary>
            Start a program on the brick
            </summary>
            <param name="file">File to start</param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.StartProgram(MonoBrick.EV3.BrickFile,System.Boolean)">
            <summary>
            Start a program on the brick
            </summary>
            <param name="file">File to stat.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send</param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.StartProgram(System.String)">
            <summary>
            Start a program on the brick
            </summary>
            <param name="name">
            The name of the program to start
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.StartProgram(System.String,System.Boolean)">
            <summary>
            Starts a program on the brick
            </summary>
            <param name="name">
            The of the program to start
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.StopProgram">
            <summary>
            Stops all running programs
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.StopProgram(System.Boolean)">
            <summary>
            Stops all running programs
            </summary>
            <param name="reply">
            If set to <c>true</c> reply the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.GetRunningProgram">
            <summary>
            Get the name of the program that is curently running
            </summary>
            <returns>
            The running program.
            </returns>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.PlayTone(System.Byte,System.UInt16,System.UInt16)">
            <summary>
            Play a tone.
            </summary>
            <param name="volume">Volume.</param>
            <param name="frequency">Frequency of the tone</param>
            <param name="durationMs">Duration in ms.</param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.PlayTone(System.Byte,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Play a tone.
            </summary>
            <param name="volume">Volume.</param>
            <param name="frequency">Frequency of the tone</param>
            <param name="durationMs">Duration in ms.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send</param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.Beep(System.Byte,System.UInt16)">
            <summary>
            Make the brick say beep
            </summary>
            <param name="volume">Volume of the beep</param>
            <param name="durationMs">Duration in ms.</param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.Beep(System.Byte,System.UInt16,System.Boolean)">
            <summary>
            Make the brick say beep
            </summary>
            <param name="volume">Volume of the beep</param>
            <param name="durationMs">Duration in ms.</param>
            <param name="reply">If set to <c>true</c> reply from the brick will be send</param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.PlaySoundFile(System.String,System.Byte,System.Boolean)">
            <summary>
            Play a sound file.
            </summary>
            <param name="name">Name the name of the file to play</param>
            <param name="volume">Volume.</param>
            <param name="repeat">If set to <c>true</c> the file will play in a loop</param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.PlaySoundFile(System.String,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Play a sound file.
            </summary>
            <param name="name">Name the name of the file to play</param>
            <param name="volume">Volume.</param>
            <param name="repeat">If set to <c>true</c> the file will play in a loop</param>
            <param name="reply">If set to <c>true</c> a reply from the brick will be send</param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.StopSoundPlayback(System.Boolean)">
            <summary>
            Stops all sound playback.
            </summary>
            <param name="reply">If set to <c>true</c> reply from brick will be send</param>
        </member>
        <member name="M:MonoBrick.EV3.Brick`4.GetSensorTypes">
            <summary>
            Gets the sensor types of all four sensors
            </summary>
            <returns>The sensor types.</returns>
        </member>
        <member name="T:MonoBrick.EV3.ParameterFormat">
            <summary>
            Encoded Parameter format
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.ParameterType">
            <summary>
            Encoded Parameter type
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.ShortSign">
            <summary>
            Encoded Parameter sign when using short constant format
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.ConstantParameterType">
            <summary>
            Encoded Parameter type when using long constant format
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.VariableScope">
            <summary>
            Encoded Parameter scope when using long variable format
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.VariableType">
            <summary>
            Encoded Parameter type when using long variable format
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.FollowType">
            <summary>
            Encoded Parameter following when using long format
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.ProgramSlots">
            <summary>
            Program slots used by the EV3
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ProgramSlots.Gui">
            <summary>
            Program slot reserved for executing the user interface
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ProgramSlots.User">
            <summary>
            Program slot used to execute user projects, apps and tools
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ProgramSlots.Cmd">
            <summary>
            Program slot used for direct commands coming from c_com
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ProgramSlots.Term">
            <summary>
            Program slot used for direct commands coming from c_ui
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ProgramSlots.Debug">
            <summary>
            Program slot used to run the debug ui
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ProgramSlots.Current">
            <summary>
            ONLY VALID IN opPROGRAM_STOP
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.DaisyChainLayer">
            <summary>
            The daisychain layer
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.DaisyChainLayer.EV3">
            <summary>
            The EV3
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.DaisyChainLayer.First">
            <summary>
            First EV3 in the Daisychain
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.DaisyChainLayer.Second">
            <summary>
            Second EV3 in the Daisychain
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.DaisyChainLayer.Third">
            <summary>
            Third EV3 in the Daisychain
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.CommandType">
            <summary>
            EV3 command type.
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.CommandType.DirectCommand">
            <summary>
            Direct command
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.CommandType.SystemCommand">
            <summary>
            System command.
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.CommandType.DirectReply">
            <summary>
            Direct command reply.
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.CommandType.SystemReply">
            <summary>
            System command reply.
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.CommandType.DirectReplyWithError">
            <summary>
            Direct reply with error.
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.CommandType.SystemReplyWithError">
            <summary>
            System reply with error.
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.SystemCommand">
            <summary>
            EV3 system commands
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.ByteCodes">
            <summary>
            EV3 byte codes
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.SoundSubCodes">
            <summary>
            EV3 sound sub codes
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.InputSubCodes">
            <summary>
            EV3 input sub codes.
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.FileSubCodes">
            <summary>
            EV3 file sub codes.
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.MemorySubCodes">
            <summary>
            Memory sub codes
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.Command">
            <summary>
            Class for creating a EV3 system command.
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.Command.ShortValueMax">
            <summary>
            The short value maximum size
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.Command.ShortValueMin">
            <summary>
            The short value minimum size
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Command.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Command" /> class.
            </summary>
            <param name="data">Data.</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.#ctor(MonoBrick.EV3.SystemCommand,System.UInt16,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Command" /> class as a system command
            </summary>
            <param name="systemCommand">System command.</param>
            <param name="sequenceNumber">Sequence number.</param>
            <param name="reply">If set to <c>true</c> reply will be send from brick</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.#ctor(MonoBrick.EV3.ByteCodes,System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Command" /> class as a direct command
            </summary>
            <param name="byteCode">Bytecode to use for the direct command</param>
            <param name="globalVariables">Global variables.</param>
            <param name="localVariables">Number of global variables</param>
            <param name="sequenceNumber">Number of local variables</param>
            <param name="reply">If set to <c>true</c> reply will be send from the brick</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.#ctor(System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Command" /> as a direct command
            </summary>
            <param name="globalVariables">Global bytes.</param>
            <param name="localVariables">Number of global variables</param>
            <param name="sequenceNumber">Number of local variables</param>
            <param name="reply">If set to <c>true</c> reply will be send from brick</param>
        </member>
        <member name="P:MonoBrick.EV3.Command.SystemCommandType">
            <summary>
            Gets the EV3 system command.
            </summary>
            <value>The system command.</value>
        </member>
        <member name="P:MonoBrick.EV3.Command.CommandType">
            <summary>
            Gets the EV3 command type
            </summary>
            <value>The type of the command.</value>
        </member>
        <member name="P:MonoBrick.EV3.Command.SequenceNumber">
            <summary>
            Gets the sequence number
            </summary>
            <value>The sequence number.</value>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.SensorType)">
            <summary>
            Append a sensor type value
            </summary>
            <param name="type">Sensor type to append</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.SensorMode)">
            <summary>
            Append a sensor mode value
            </summary>
            <param name="mode">Sensor mode to append</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.ByteCodes)">
            <summary>
            Append a byte code value
            </summary>
            <param name="byteCode">Byte code to append</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.FileSubCodes)">
            <summary>
            Append a file sub code
            </summary>
            <param name="code">Code to append.</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.SoundSubCodes)">
            <summary>
            Append a file sub code
            </summary>
            <param name="code">Code to append.</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.DaisyChainLayer)">
            <summary>
            Append a daisy chain layer
            </summary>
            <param name="chain">Daisy chain layer to append</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.InputSubCodes)">
            <summary>
            Append a input sub code
            </summary>
            <param name="subCode">Sub code to append</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.MemorySubCodes)">
            <summary>
            Append a memory sub code
            </summary>
            <param name="subCode">Sub code to append</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.SensorPort)">
            <summary>
            Append a sensor port
            </summary>
            <param name="port">Sensor port to append</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.MotorPort)">
            <summary>
            Append a motor port
            </summary>
            <param name="port">Motor port to append</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.OutputBitfield)">
            <summary>
            Append a output bit field
            </summary>
            <param name="bitField">Bit field to append</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.Byte,MonoBrick.EV3.ParameterFormat)">
            <summary>
            Append a constant parameter encoded byte in either short or long format. Note that if format is long parameter constant type will be a value
            </summary>
            <param name="value">Value to append</param>
            <param name="format">Use either short or long format</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.SByte,MonoBrick.EV3.ParameterFormat)">
            <summary>
            Append a constant parameter encoded byte in either short or long format. Note that if format is long parameter constant type will be a value
            </summary>
            <param name="value">Value to append</param>
            <param name="format">Use either short or long format</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.SByte,MonoBrick.EV3.ConstantParameterType)">
            <summary>
            Append a constant parameter encoded
            </summary>
            <param name="value">byte to append</param>
            <param name="type">User either value or lable type</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.Byte,MonoBrick.EV3.ConstantParameterType)">
            <summary>
            Append a constant parameter encoded
            </summary>
            <param name="value">byte to append</param>
            <param name="type">User either value or lable type</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.Int16,MonoBrick.EV3.ConstantParameterType)">
            <summary>
            Append a constant parameter encoded
            </summary>
            <param name="value">Int16 to append</param>
            <param name="type">User either value or lable type</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.Int32,MonoBrick.EV3.ConstantParameterType)">
            <summary>
            Append a constant parameter encoded
            </summary>
            <param name="value">Int32 to append</param>
            <param name="type">User either value or lable type</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.UInt32,MonoBrick.EV3.ConstantParameterType)">
            <summary>
            Append a constant parameter encoded
            </summary>
            <param name="value">UInt32 to append</param>
            <param name="type">User either value or lable type</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.Single,MonoBrick.EV3.ConstantParameterType)">
            <summary>
            Append a constant parameter encoded
            </summary>
            <param name="value">Float to append</param>
            <param name="type">User either value or lable type</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.String,MonoBrick.EV3.ConstantParameterType)">
            <summary>
            Append a constant parameter encoded
            </summary>
            <param name="s">String to append</param>
            <param name="type">User either value or lable type</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.Byte,MonoBrick.EV3.VariableScope)">
            <summary>
            Append a variable parameter encoded byte in short format
            </summary>
            <param name="value">Value to append</param>
            <param name="scope">Select either global or local scope</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.Byte,MonoBrick.EV3.VariableScope,MonoBrick.EV3.VariableType)">
            <summary>
            Append a variable parameter encoded byte in long format
            </summary>
            <param name="value">Value to append</param>
            <param name="scope">Select either global or local scope</param>
            <param name="type">Select either value or handle scope</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.Int16,MonoBrick.EV3.VariableScope,MonoBrick.EV3.VariableType)">
            <summary>
            Append a variable parameter encoded Int16
            </summary>
            <param name="value">Value to append</param>
            <param name="scope">Select either global or local scope</param>
            <param name="type">Select either value or handle scope</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.Int32,MonoBrick.EV3.VariableScope,MonoBrick.EV3.VariableType)">
            <summary>
            Append a variable parameter encoded Int32
            </summary>
            <param name="value">Value to append</param>
            <param name="scope">Select either global or local scope</param>
            <param name="type">Select either value or handle scope</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(System.String,MonoBrick.EV3.VariableScope,MonoBrick.EV3.VariableType)">
            <summary>
            Append a variable parameter encoded string
            </summary>
            <param name="s">String to append</param>
            <param name="scope">Select either global or local scope</param>
            <param name="type">Select either value or handle scope</param>
        </member>
        <member name="M:MonoBrick.EV3.Command.Append(MonoBrick.EV3.ConstantParameterType,MonoBrick.EV3.FollowType)">
            <summary>
            Append the specified longType and followType.
            </summary>
            <param name="longType">Long type.</param>
            <param name="followType">Follow type.</param>
        </member>
        <member name="T:MonoBrick.EV3.Reply">
            <summary>
            Class for creating a EV3 reply
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.Reply.HasError">
            <summary>
            Gets a value indicating whether this instance has error.
            </summary>
            <value>
                <c>true</c> if this instance has error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Reply.ErrorType">
            <summary>
            Gets the type of error.
            </summary>
            <value>
            The type of error
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Reply.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <value>
            The error code
            </value>
        </member>
        <member name="M:MonoBrick.EV3.Reply.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Reply" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Reply.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Reply" /> class.
            </summary>
            <param name="data">
            The byte array to be used for the reply
            </param>
        </member>
        <member name="P:MonoBrick.EV3.Reply.SystemCommandType">
            <summary>
            Gets the EV3 system command.
            </summary>
            <value>The system command.</value>
        </member>
        <member name="P:MonoBrick.EV3.Reply.CommandType">
            <summary>
            Gets the EV3 command type
            </summary>
            <value>The type of the command.</value>
        </member>
        <member name="P:MonoBrick.EV3.Reply.SequenceNumber">
            <summary>
            Gets the sequence number.
            </summary>
            <value>The sequence number.</value>
        </member>
        <member name="P:MonoBrick.EV3.Reply.CommandTypeAsString">
            <summary>
            Gets the command byte as string.
            </summary>
            <value>
            The command byte as string
            </value>
        </member>
        <member name="T:MonoBrick.EV3.BrickError">
            <summary>
            Error coes from the EV3 brick
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.BrickException">
            <summary>
            Exceptions from EV3 brick
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.BrickException.#ctor(MonoBrick.EV3.BrickError)">
            <summary>
            Initializes a new instance of EV3 exception
            </summary>
            <param name="error">
            Brick Error.
            </param>
        </member>
        <member name="M:MonoBrick.EV3.BrickException.#ctor(MonoBrick.EV3.BrickError,System.Exception)">
            <summary>
            Initializes a new instance of EV3 exception
            </summary>
            <param name="error">
            Brick error
            </param>
            <param name="inner">
            Inner exception
            </param>
        </member>
        <member name="T:MonoBrick.EV3.Error">
            <summary>
            Class used to throw an EV3 exception from monoBrick
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Error.ThrowException(System.Byte,MonoBrick.ErrorType)">
            <summary>
            Throws an monobrick related exception based on errorCode and errorType
            </summary>
            <param name="errorCode">
            Error code
            </param>
            <param name="type">
            Error type
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Error.ThrowException(MonoBrick.EV3.Reply)">
            <summary>
            Throws a monobrick exception based on the Reply from the brick
            </summary>
            <param name="reply">
            Reply to base the exception on
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Error.ThrowException(System.Byte)">
            <summary>
            Throws a monobrick exception based on the error code
            </summary>
            <param name="errorCode">
            Error code to base the exception on
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Error.ToErrorType(System.Byte)">
            <summary>
            Convert errorCode to ErrorType
            </summary>
            <returns>
            The error type
            </returns>
            <param name="errorCode">
            Error code
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Error.CheckForError(MonoBrick.EV3.Reply,System.UInt16)">
            <summary>
            Checks a reply for error. If reply has error relevant exception is thrown
            </summary>
            <param name="reply">
            The reply to check
            </param>
            <param name="expectedSequenceNumber">Expected sequence number.</param>
        </member>
        <member name="M:MonoBrick.EV3.Error.CheckForError(MonoBrick.EV3.Reply,System.Int32,System.UInt16)">
            <summary>
            Checks a reply for error. If reply has error relevant exception is thrown
            </summary>
            <param name="reply">
            The reply to check
            </param>
            <param name="expectedLength">
            Expected reply length
            </param>
            <param name="expectedSequenceNumber">
            Expected sequence number
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Error.CheckForError(MonoBrick.EV3.Reply,System.Int32,System.UInt16,MonoBrick.EV3.Error.CleanUpMethod)">
            <summary>
            Checks a reply for error. If reply has error relevant exception is thrown
            </summary>
            <param name="reply">
            The reply to check
            </param>
            <param name="expectedLength">
            Expected reply length
            </param>
            <param name="expectedSequenceNumber">
            Expected sequence number
            </param>
            <param name="cleanUp">
            Clean up method called before the exception is thrown
            </param>
        </member>
        <member name="T:MonoBrick.EV3.BrickFile">
            <summary>
            Class for accessing a file on the EV3
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.BrickFile.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.BrickFile" /> class.
            </summary>
            <param name="name">Name of the file.</param>
            <param name="size">Size of the file in bytes.</param>
            <param name="path">Path to the location of the file.</param>
        </member>
        <member name="P:MonoBrick.EV3.BrickFile.FullName">
            <summary>
            Gets the full name of the file e.i. path+filename
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:MonoBrick.EV3.BrickFile.Name">
            <summary>
            Gets the name of the file
            </summary>
            <value>
            The name of the file
            </value>
        </member>
        <member name="P:MonoBrick.EV3.BrickFile.Size">
            <summary>
            Gets the size
            </summary>
            <value>
            The size in bytes
            </value>
        </member>
        <member name="P:MonoBrick.EV3.BrickFile.IsEmpty">
            <summary>
            Gets a value indicating whether the file is empty
            </summary>
            <value>
                <c>true</c> if the file is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoBrick.EV3.BrickFile.Extension">
            <summary>
            Gets the file extension.
            </summary>
            <value>
            The file extension.
            </value>
        </member>
        <member name="P:MonoBrick.EV3.BrickFile.FileType">
            <summary>
            Gets the file type
            </summary>
            <value>
            The file type
            </value>
        </member>
        <member name="P:MonoBrick.EV3.BrickFile.Path">
            <summary>
            Gets the path where the file is located
            </summary>
            <value>The path.</value>
        </member>
        <member name="M:MonoBrick.EV3.BrickFile.CompareTo(MonoBrick.EV3.BrickFile)">
            <summary>
            Compares to.
            </summary>
            <returns>The to.</returns>
            <param name="other">Other.</param>
        </member>
        <member name="T:MonoBrick.EV3.FolderStructure">
            <summary>
            Class that holds information about a EV3 folder and it's subfolders.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.FolderStructure.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.FolderStructure" /> class.
            </summary>
            <param name="path">Path of the folder.</param>
            <param name="isBrowsable">If set to <c>true</c> the folder is browsable.</param>
        </member>
        <member name="M:MonoBrick.EV3.FolderStructure.RunThroughFolders">
            <summary>
            Runs recursively through the folders structure.
            </summary>
            <returns>The next (sub)folder in the structure.</returns>
        </member>
        <member name="M:MonoBrick.EV3.FolderStructure.RecursiveRunThrough(MonoBrick.EV3.FolderStructure)">
            <summary>
            Recursives run through the folder structure.
            </summary>
            <returns>A structure enumeable</returns>
            <param name="structure">Structure.</param>
        </member>
        <member name="P:MonoBrick.EV3.FolderStructure.IsBrowsable">
            <summary>
            Gets a value indicating whether folder is browsable.
            </summary>
            <value>
                <c>true</c> if this folder is readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MonoBrick.EV3.FolderStructure.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:MonoBrick.EV3.FolderStructure.FileList">
            <summary>
            Gets the file list.
            </summary>
            <value>The file list.</value>
        </member>
        <member name="P:MonoBrick.EV3.FolderStructure.FolderList">
            <summary>
            Gets the sub folders.
            </summary>
            <value>The sub folders.</value>
        </member>
        <member name="M:MonoBrick.EV3.FolderStructure.CompareTo(MonoBrick.EV3.FolderStructure)">
            <Docs>To be added.</Docs>
            <para>Returns the sort order of the current instance compared to the specified object.</para>
            <summary>
            Compares to.
            </summary>
            <returns>The to.</returns>
            <param name="other">Other.</param>
        </member>
        <member name="M:MonoBrick.EV3.FolderStructure.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:MonoBrick.EV3.FolderStructure" />.
            </summary>
            <returns>A the path as a string.</returns>
        </member>
        <member name="T:MonoBrick.EV3.FilSystem">
            <summary>
            Fil system for the EV3 brick
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.FilSystem.BeginWrite(System.UInt32,System.String)">
            <summary>
            Begins the download from you to the EV3
            </summary>
            <returns>The download.</returns>
            <param name="fileLength">File length.</param>
            <param name="filename">Filename relative to /home/root/lms2012/sys</param>
        </member>
        <member name="M:MonoBrick.EV3.FilSystem.ContinueWrite(System.Byte,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Continues writing files.
            </summary>
            <param name="handle">Handle.</param>
            <param name="data">Data.</param>
            <param name="startIdx">Start index.</param>
            <param name="length">Length.</param>
        </member>
        <member name="M:MonoBrick.EV3.FilSystem.GetFolderInfo(System.String,MonoBrick.EV3.BrickFile[]@,System.String[]@)">
            <summary>
            Gets the folder info.
            </summary>
            <param name="path">Path to folder to read</param>
            <param name="files">Files in folder</param>
            <param name="subFoldersNames">Sub folders names</param>
        </member>
        <member name="M:MonoBrick.EV3.FilSystem.GetFolderStructure(System.String)">
            <summary>
            Get a complete folder structure
            </summary>
            <returns>The folder structure</returns>
            <param name="path">Path where you want the folder structure to start</param>
        </member>
        <member name="M:MonoBrick.EV3.FilSystem.ReadFile(MonoBrick.EV3.BrickFile,System.String)">
            <summary>
            Read a file from the EV3
            </summary>
            <param name="file">File to download.</param>
            <param name="destinationFileName">Destination file name.</param>
        </member>
        <member name="M:MonoBrick.EV3.FilSystem.ReadFile(System.String,System.String)">
            <summary>
            Read a file from the EV3
            </summary>
            <param name="brickFileName">Brick file name.</param>
            <param name="destinationFileName">Destination file name.</param>
        </member>
        <member name="M:MonoBrick.EV3.FilSystem.WriteFile(System.String,System.String)">
            <summary>
            Write a file to the EV3
            </summary>
            <param name="fileToWrite">
            PC file to write to brick
            </param>
            <param name="brickFileName">
            File name that the file should have on the brick including file path example: /home/root/lms2012/prjs/someFileName.txt
            </param>
        </member>
        <member name="M:MonoBrick.EV3.FilSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="dir">Full path of directory to create.</param>
        </member>
        <member name="M:MonoBrick.EV3.FilSystem.DeleteFile(MonoBrick.EV3.BrickFile)">
            <summary>
            Deletes a file on the EV3.
            </summary>
            <param name="file">File to delete.</param>
        </member>
        <member name="M:MonoBrick.EV3.FilSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file on the EV3.
            </summary>
            <param name="fileName">File name to delete.</param>
        </member>
        <member name="T:MonoBrick.EV3.Mailbox">
            <summary>
            Class for EV3's mailbox brick.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Mailbox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Mailbox" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Mailbox.Send(System.String,System.Byte[],System.Boolean)">
            <summary>
            Send a byte array to the mailbox
            </summary>
            <param name="mailboxName">Mailbox name to send to.</param>
            <param name="data">Data to send.</param>
            <param name="reply">If set to <c>true</c> reply from the brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Mailbox.Send(System.String,System.String,System.Boolean)">
            <summary>
            Send a string message to the mailbox
            </summary>
            <param name="mailboxName">Mailbox name to send to.</param>
            <param name="message">Message to send.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="T:MonoBrick.EV3.OutputBitfield">
            <summary>
            Output bitfeild
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.MotorPort">
            <summary>
            Motor ports
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.Polarity">
            <summary>
            Polarity of the motor
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.Output">
            <summary>
            Class for controlling the EV3's output
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Output.#ctor(MonoBrick.EV3.OutputBitfield,MonoBrick.EV3.DaisyChainLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Output" /> class.
            </summary>
            <param name="bf">The output bitfields to use</param>
            <param name="daisyChainLayer">Daisy chain layer to use.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Output" /> class.
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.Output.connection">
            <summary>
            The connection that is used
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.Output.BitField">
            <summary>
            Gets or sets the output bit field.
            </summary>
            <value>The bit field.</value>
        </member>
        <member name="P:MonoBrick.EV3.Output.DaisyChainLayer">
            <summary>
            Gets or sets the daisy chain layer.
            </summary>
            <value>The daisy chain layer.</value>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetType(MonoBrick.EV3.MotorPort,System.Byte,System.Boolean)">
            <summary>
            Sets the type of the output. I don't know what this is used for.
            </summary>
            <param name="port">Motor port to use.</param>
            <param name="type">Type to use.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.Reset(System.Boolean)">
            <summary>
            Reset the output
            </summary>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.Stop(System.Boolean,System.Boolean)">
            <summary>
            Stop the specified brake and reply.
            </summary>
            <param name="brake">If set to <c>true</c> the motor will brake and not coast</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetSpeed(System.Byte,System.Boolean)">
            <summary>
            Sets the speed.
            </summary>
            <param name="speed">Speed.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetPower(System.Byte,System.Boolean)">
            <summary>
            Sets the power.
            </summary>
            <param name="power">Power.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetPosition(System.Int32,System.Boolean)">
            <summary>
            Sets the absolute position from last reset
            </summary>
            <param name="position">Position to use</param>
            <param name="reply">If set to <c>true</c> reply from the brick will be send</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.Start(System.Boolean)">
            <summary>
            Start
            </summary>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.Start(System.SByte,System.Boolean)">
            <summary>
            Start with the specified speed
            </summary>
            <param name="speed">Speed.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetPolarity(MonoBrick.EV3.Polarity,System.Boolean)">
            <summary>
            Sets the polarity.
            </summary>
            <param name="polarity">Polarity of the output</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetStepPower(System.SByte,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Set Ramp up, constant and rampdown steps and power of the outputs
            </summary>
            <param name="power">Power to use</param>
            <param name="rampUpSteps">Steps used to ramp up</param>
            <param name="constantSpeedSteps">Steps used for constant speed</param>
            <param name="rampDownSteps">Steps used to ramp down</param>
            <param name="brake">If set to <c>true</c> brake when done.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetTimePower(System.Byte,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Set Ramp up, constant and rampdown time and power of the outputs
            </summary>
            <param name="power">Power to use</param>
            <param name="rampUpTime">Time in ms to ramp up</param>
            <param name="constantSpeedTime">Time in ms for constant speed</param>
            <param name="rampDownTime">Time in ms to ramp down</param>
            <param name="brake">If set to <c>true</c> brake when done.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetStepSpeed(System.SByte,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Set Ramp up, constant and rampdown steps and speed of the outputs
            </summary>
            <param name="speed">Speed to use</param>
            <param name="rampUpSteps">Steps used to ramp up</param>
            <param name="constantSpeedSteps">Steps used for constant speed</param>
            <param name="rampDownSteps">Steps used to ramp down</param>
            <param name="brake">If set to <c>true</c> brake when done.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetTimeSpeed(System.SByte,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Set Ramp up, constant and rampdown time and power of the outputs
            </summary>
            <param name="speed">Speed to use</param>
            <param name="rampUpTime">Time in ms to ramp up</param>
            <param name="constantSpeedTime">Time in ms for constant speed</param>
            <param name="rampDownTime">Time in ms to ramp down</param>
            <param name="brake">If set to <c>true</c> brake when done</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetStepSync(System.SByte,System.Int16,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Sync steps between two motors
            </summary>
            <param name="speed">Speed.</param>
            <param name="turnRatio">Turn ratio between two syncronized motors</param>
            <param name="steps">Steps in degrees</param>
            <param name="brake">If set to <c>true</c> brake.</param>
            <param name="reply">If set to <c>true</c> reply.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.SetTimeSync(System.SByte,System.Int16,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Time sync between two motors
            </summary>
            <param name="speed">Speed.</param>
            <param name="turnRatio">Turn ratio between two syncronized motors</param>
            <param name="timeInMs">Time in ms</param>
            <param name="brake">If set to <c>true</c> brake.</param>
            <param name="reply">If set to <c>true</c> reply.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.WaitForReady(System.Boolean)">
            <summary>
            Wait for output ready (wait for completion)
            </summary>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.IsReady">
            <summary>
            Testing if output is used
            </summary>
            <returns>
                <c>true</c> if this instance is ready; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Output.ClearCount(System.Boolean)">
            <summary>
            Clearing tacho count when used as sensor
            </summary>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.GetCount(MonoBrick.EV3.MotorPort)">
            <summary>
            Gets the tacho count.
            </summary>
            <returns>The tacho count.</returns>
            <param name="port">Motor port to use</param>
        </member>
        <member name="M:MonoBrick.EV3.Output.GetSpeed(MonoBrick.EV3.MotorPort)">
            <summary>
            Gets the speed of the motor
            </summary>
            <returns>The speed.</returns>
            <param name="port">Motor port to read</param>
        </member>
        <member name="T:MonoBrick.EV3.MotorBase">
            <summary>
            Base class for EV3 motors
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.MotorBase.output">
            <summary>
            The output.
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.MotorBase.Port">
            <summary>
            Gets or sets the motor port this is set by the bitfield.
            Do not set this use the bitfield property instead
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:MonoBrick.EV3.MotorBase.BitField">
            <summary>
            Gets or sets the bit field.
            </summary>
            <value>The bit field.</value>
        </member>
        <member name="M:MonoBrick.EV3.MotorBase.MotorPortToBitfield(MonoBrick.EV3.MotorPort)">
            <summary>
            Convert a motor port to bitfield.
            </summary>
            <returns>The port to bitfield.</returns>
        </member>
        <member name="M:MonoBrick.EV3.MotorBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Motor" /> class.
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.MotorBase.Connection">
            <summary>
            The connection that is used
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.MotorBase.DaisyChainLayer">
            <summary>
            Gets or sets the daisy chain layer.
            </summary>
            <value>The daisy chain layer.</value>
        </member>
        <member name="M:MonoBrick.EV3.MotorBase.Brake">
            <summary>
            Brake the motor (is still on but does not move)
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.MotorBase.Brake(System.Boolean)">
            <summary>
            Brake the motor (is still on but does not move)
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.MotorBase.Off">
            <summary>
            Turn the motor off
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.MotorBase.Off(System.Boolean)">
            <summary>
            Turn the motor off
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.MotorBase.SetPower(System.Byte)">
            <summary>
            Sets the power of the motor.
            </summary>
            <param name="power">Power to use.</param>
        </member>
        <member name="M:MonoBrick.EV3.MotorBase.SetPower(System.Byte,System.Boolean)">
            <summary>
            Sets the power of the motor.
            </summary>
            <param name="power">Power to use.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="T:MonoBrick.EV3.Motor">
            <summary>
            Class for EV3 motor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.Motor.reverse">
            <summary>
            The reverse value
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.Motor.Reverse">
            <summary>
            Gets or sets a value indicating whether motor runs in reverse direction
            </summary>
            <value>
                <c>true</c> if reverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoBrick.EV3.Motor.On(System.SByte)">
            <summary>
            Move the motor
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.On(System.SByte,System.Boolean)">
            <summary>
            Move the motor
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.On(System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Move the motor to a relative position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="degrees">
            The relative position of the motor
            </param>
            <param name="brake">
            Set to <c>true</c> if the motor should brake when done
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.On(System.SByte,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Move the motor to a relative position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="degrees">
            The relative position of the motor
            </param>
            <param name="brake">
            Set to <c>true</c> if the motor should brake when done
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.MoveTo(System.Byte,System.Int32,System.Boolean)">
            <summary>
            Moves the motor to an absolute position
            </summary>
            <param name="speed">
            Speed of the motor 0 to 100
            </param>
            <param name="position">
            Absolute position
            </param>
            <param name="brake">
            Set to <c>true</c> if the motor should brake when done
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.MoveTo(System.Byte,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Moves the motor to an absolute position
            </summary>
            <param name="speed">
            Speed of the motor 0 to 100
            </param>
            <param name="position">
            Absolute position
            </param>
            <param name="brake">
            Set to <c>true</c> if the motor should brake when done
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.SpeedProfileStep(System.SByte,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Create a speed profile where ramp up and down is specified in steps
            </summary>
            <param name="speed">Maximum speed of the motor.</param>
            <param name="rampUpSteps">Ramp up steps.</param>
            <param name="constantSpeedSteps">Constant speed steps.</param>
            <param name="rampDownSteps">Ramp down steps.</param>
            <param name="brake">If set to <c>true</c> the motor will brake when movement is done.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.SpeedProfileTime(System.SByte,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Create a speed profile where ramp up and down is specified in time
            </summary>
            <param name="speed">Maximum speed of the motor.</param>
            <param name="rampUpTimeMs">Ramp up time ms.</param>
            <param name="constantSpeedTimeMs">Constant speed time ms.</param>
            <param name="rampDownTimeMs">Ramp down time ms.</param>
            <param name="brake">If set to <c>true</c> the motor will brake when movement is done.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.PowerProfileStep(System.SByte,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Create a power profile where ramp up and down is specified in steps
            </summary>
            <param name="power">Maximum power of the motor.</param>
            <param name="rampUpSteps">Ramp up steps.</param>
            <param name="constantSpeedSteps">Constant speed steps.</param>
            <param name="rampDownSteps">Ramp down steps.</param>
            <param name="brake">If set to <c>true</c> the motor will brake when movement is done.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.PowerProfileTime(System.Byte,System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Create a power profile where ramp up and down is specified in time
            </summary>
            <param name="power">Maximum power of the motor.</param>
            <param name="rampUpTimeMs">Ramp up time ms.</param>
            <param name="constantSpeedTimeMs">Constant speed time ms.</param>
            <param name="rampDownTimeMs">Ramp down time ms.</param>
            <param name="brake">If set to <c>true</c> the motor will brake when movement is done.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.ResetTacho">
            <summary>
            Resets the tacho
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Motor.ResetTacho(System.Boolean)">
            <summary>
            Resets the tacho
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Motor.GetTachoCount">
            <summary>
            Gets the tacho count.
            </summary>
            <returns>
            The tacho count
            </returns>
        </member>
        <member name="M:MonoBrick.EV3.Motor.IsRunning">
            <summary>
            Determines whether this motor is running.
            </summary>
            <returns>
                <c>true</c> if this motor is running; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoBrick.EV3.Motor.GetSpeed">
            <summary>
            Gets the speed of the motor
            </summary>
            <returns>The speed.</returns>
        </member>
        <member name="T:MonoBrick.EV3.MotorSync">
            <summary>
            Class for synchronizing two motors
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.MotorSync.BitField">
            <summary>
            Gets or sets the motor bit field.
            </summary>
            <value>The bit field.</value>
        </member>
        <member name="M:MonoBrick.EV3.MotorSync.StepSync(System.SByte,System.Int16,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Syncronise steps between two motors
            </summary>
            <param name="speed">Speed of the motors.</param>
            <param name="turnRatio">Turn ratio (-200 to 200).</param>
            <param name="steps">Steps to move.</param>
            <param name="brake">If set to <c>true</c> motors will brake when done otherwise off.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.MotorSync.TimeSync(System.SByte,System.Int16,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Syncronise time between two motors
            </summary>
            <param name="speed">Speed of the motors.</param>
            <param name="turnRatio">Turn ratio (-200 to 200).</param>
            <param name="timeInMs">Time in ms to move.</param>
            <param name="brake">If set to <c>true</c> motors will brake when done otherwise off.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.MotorSync.On(System.SByte,System.Int16)">
            <summary>
            Move both motors with the same speed
            </summary>
            <param name="speed">Speed of the motors.</param>
            <param name="turnRatio">Turn ratio (-200 to 200).</param>
        </member>
        <member name="M:MonoBrick.EV3.MotorSync.On(System.SByte,System.Int16,System.Boolean)">
            <summary>
            Move both motors with the same speed
            </summary>
            <param name="speed">Speed of the motors.</param>
            <param name="turnRatio">Turn ratio (-200 to 200).</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.MotorSync.On(System.SByte,System.Int16,System.UInt32)">
            <summary>
            Move both motors with the same speed a given number of steps
            </summary>
            <param name="speed">Speed of the motors.</param>
            <param name="turnRatio">Turn ratio (-200 to 200).</param>
            <param name="degrees">Degrees to move.</param>
        </member>
        <member name="M:MonoBrick.EV3.MotorSync.On(System.SByte,System.Int16,System.UInt32,System.Boolean)">
            <summary>
            Move both motors with the same speed a given number of steps
            </summary>
            <param name="speed">Speed of the motors.</param>
            <param name="turnRatio">Turn ratio (-200 to 200).</param>
            <param name="degrees">Degrees to move.</param>
            <param name="reply">If set to <c>true</c> reply from brick will be send.</param>
        </member>
        <member name="T:MonoBrick.EV3.Vehicle">
            <summary>
            Class for controlling a vehicle
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.#ctor(MonoBrick.EV3.MotorPort,MonoBrick.EV3.MotorPort)">
            <summary>
            Initializes a new instance of the Vehicle class.
            </summary>
            <param name="left">
            The left motor of the vehicle
            </param>
            <param name="right">
            The right motor of the vehicle
            </param>
        </member>
        <member name="P:MonoBrick.EV3.Vehicle.LeftPort">
            <summary>
            Gets or sets the left motor
            </summary>
            <value>
            The left motor
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Vehicle.RightPort">
            <summary>
            Gets or sets the right motor
            </summary>
            <value>
            The right motor
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Vehicle.ReverseLeft">
            <summary>
            Gets or sets a value indicating whether the left motor is running in reverse direction
            </summary>
            <value>
                <c>true</c> if left motor is reverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoBrick.EV3.Vehicle.ReverseRight">
            <summary>
            Gets or sets a value indicating whether the right motor is running in reverse direction
            </summary>
            <value>
                <c>true</c> if right motor is reverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.Backward(System.SByte)">
            <summary>
            Run backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.Backward(System.SByte,System.Boolean)">
            <summary>
            Run backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.Backward(System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Run backwards
            </summary>
            <param name="speed">Speed.</param>
            <param name="degrees">Degrees.</param>
            <param name="reply">If set to <c>true</c> the brick will send a reply</param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.Forward(System.SByte)">
            <summary>
            Run forward
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.Forward(System.SByte,System.Boolean)">
            <summary>
            Run forward
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.Forward(System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Run forward
            </summary>
            <param name="speed">Speed.</param>
            <param name="degrees">Degrees.</param>
            <param name="reply">If set to <c>true</c> reply will be send</param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.SpinLeft(System.SByte)">
            <summary>
            Spins the vehicle left.
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.SpinLeft(System.SByte,System.Boolean)">
            <summary>
            Spins the vehicle left.
            </summary>
            <param name="speed">Speed of the vehicle -100 to 100</param>
            <param name="reply">If set to <c>true</c> reply will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.SpinLeft(System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Spins the left.
            </summary>
            <param name="speed">Speed.</param>
            <param name="degrees">Degrees.</param>
            <param name="reply">If set to <c>true</c> reply will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.SpinRight(System.SByte)">
            <summary>
            Spins the vehicle right
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.SpinRight(System.SByte,System.Boolean)">
            <summary>
            Spins the vehicle right
            </summary>
            <param name="speed">
            Speed -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.SpinRight(System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Spins the vehicle right
            </summary>
            <param name="speed">Speed.</param>
            <param name="degrees">Degrees.</param>
            <param name="reply">If set to <c>true</c> reply will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.Off(System.Boolean)">
            <summary>
            Stop moving the vehicle
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.Off">
            <summary>
            Stop moving the vehicle
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.Brake">
            <summary>
            Brake the vehicle (the motor is still on but it does not move)
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.Brake(System.Boolean)">
            <summary>
            Brake the vehicle (the motor is still on but it does not move)
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnRightForward(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle right
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnRightForward(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle right
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnRightForward(System.SByte,System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Turns the vehicle right
            </summary>
            <param name="speed">Speed.</param>
            <param name="turnPercent">Turn percent.</param>
            <param name="degrees">Degrees.</param>
            <param name="reply">If set to <c>true</c> reply will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnRightReverse(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle right while moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnRightReverse(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle right while moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnRightReverse(System.SByte,System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Turns the vehicle right while moving backwards
            </summary>
            <param name="speed">Speed.</param>
            <param name="turnPercent">Turn percent.</param>
            <param name="degrees">Degrees.</param>
            <param name="reply">If set to <c>true</c> reply will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnLeftForward(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle left
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnLeftForward(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle left
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnLeftForward(System.SByte,System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Turns the vehicle left
            </summary>
            <param name="speed">Speed.</param>
            <param name="turnPercent">Turn percent.</param>
            <param name="degrees">Degrees.</param>
            <param name="reply">If set to <c>true</c> reply will be send.</param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnLeftReverse(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle left while moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnLeftReverse(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle left while moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.EV3.Vehicle.TurnLeftReverse(System.SByte,System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Turns the vehicle left while moving backwards
            </summary>
            <param name="speed">Speed.</param>
            <param name="turnPercent">Turn percent.</param>
            <param name="degrees">Degrees.</param>
            <param name="reply">If set to <c>true</c> reply.</param>
        </member>
        <member name="T:MonoBrick.EV3.SensorPort">
            <summary>
            Sensor ports
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.SensorType">
            <summary>
            Device types
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.SensorMode">
            <summary>
            Sensor modes
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.Sensor">
            <summary>
            Class for creating a sensor
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.Sensor.DaisyChainLayer">
            <summary>
            Gets or sets the daisy chain layer.
            </summary>
            <value>The daisy chain layer.</value>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetSensorType">
            <summary>
            Gets the sensor type
            </summary>
            <returns>The type.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetSensorMode">
            <summary>
            Gets the sensor mode.
            </summary>
            <returns>The mode.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetTypeAndMode(MonoBrick.EV3.SensorType@,MonoBrick.EV3.SensorMode@)">
            <summary>
            Gets the sensor type and mode.
            </summary>
            <param name="type">Type.</param>
            <param name="mode">Mode.</param>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetName">
            <summary>
            Gets the name of the sensor
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetSymbole">
            <summary>
            Get device symbol
            </summary>
            <returns>The symbole.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetFormat">
            <summary>
            Get sensor format
            </summary>
            <returns>The format.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetRaw">
            <summary>
            Read the raw sensor value
            </summary>
            <returns>The raw sensor value.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetModeName">
            <summary>
            Get device mode name
            </summary>
            <returns>The device mode name.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetModeName(MonoBrick.EV3.SensorMode)">
            <summary>
            Get device mode name
            </summary>
            <returns>The device mode name.</returns>
            <param name="mode">Mode to get name of.</param>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetFigures(System.Byte@,System.Byte@)">
            <summary>
            Gets figure layout.
            </summary>
            <param name="figures">Figures.</param>
            <param name="decimals">Decimals.</param>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetMinMax(System.Single@,System.Single@)">
            <summary>
            Gets the min and max values that can be returned.
            </summary>
            <param name="min">Minimum.</param>
            <param name="max">Maxium.</param>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.ReadyPct">
            <summary>
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.ReadyRaw">
            <summary>
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.ReadySi">
            <summary>
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetChanges">
            <summary>
            Get positive changes since last clear
            </summary>
            <returns>The changes.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetBumbs">
            <summary>
            Get the bolean count since the last clear
            </summary>
            <returns>The bumb count.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.ClearChanges">
            <summary>
            Clear changes and bumps
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.CalcMinMax(System.UInt32,System.UInt32)">
            <summary>
            Apply new minimum and maximum raw value for device type to be used in scaling PCT and SI
            </summary>
            <param name="min">Minimum.</param>
            <param name="max">Max.</param>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.CalcMin(System.UInt32)">
            <summary>
            Apply new minimum raw value for device type to be used in scaling PCT and SI
            </summary>
            <param name="min">Minimum.</param>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.CalcMax(System.UInt32)">
            <summary>
            Apply new maximum raw value for device type to be used in scaling PCT and SI
            </summary>
            <param name="max">Max.</param>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.CalcDefault">
            <summary>
            Apply the default minimum and maximum raw value for device type to be used in scaling PCT and SI
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.SetUp(System.Byte,System.Int16,System.Byte[])">
            <summary>
            Generic setup/read IIC sensors
            </summary>
            <returns>DATA8 array (handle) to read into</returns>
            <param name="repeat">Repeat setup/read "REPEAT" times (0 = infinite)</param>
            <param name="reapeatTime">Time between repeats [10..1000mS] (0 = 10)</param>
            <param name="writeData">Byte array to write</param>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.ClearAll">
            <summary>
            Clear all devices (e.c. counters, angle, ...)
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.StopAll">
            <summary>
            Stop all devices (e.c. motors, ...)
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.GetRead">
            <summary>
            Read a sensor value
            </summary>
            <returns>The sensor value.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.ReadSi">
            <summary>
            Reads the si sensor value
            </summary>
            <returns>The si sensor value.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.SetMode(MonoBrick.EV3.SensorMode)">
            <summary>
            Sets the sensor mode
            </summary>
            <param name="mode">Mode to use.</param>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.IsReady">
            <summary>
            Wait for device ready (wait for valid data)
            </summary>
            <returns>
                <c>true</c> if this instance is ready; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.Write(System.Byte[])">
            <summary>
            Write data to device (only UART devices)
            </summary>
            <param name="data">Data array to write.</param>
        </member>
        <member name="F:MonoBrick.EV3.Sensor.isInitialized">
            <summary>
            If initialized has been called
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.Sensor.mode">
            <summary>
            Holds the sensor mode that is used.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Sensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.#ctor(MonoBrick.EV3.SensorMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.Sensor" /> class.
            </summary>
            <param name="mode">Mode to use.</param>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.Initialize">
            <summary>
            Initialize the sensor
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Sensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>
            The value as a string
            </returns>
        </member>
        <member name="T:MonoBrick.EV3.TouchMode">
            <summary>
            Sensor mode when using a touch sensor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.TouchMode.Boolean">
            <summary>
            On or off mode
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.TouchMode.Count">
            <summary>
            Bump mode
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.TouchSensor">
            <summary>
            Class used for touch sensor. Works with both EV3 and NXT
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.TouchSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.TouchSensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.TouchSensor.#ctor(MonoBrick.EV3.TouchMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.TouchSensor" /> class.
            </summary>
            <param name="mode">Mode.</param>
        </member>
        <member name="M:MonoBrick.EV3.TouchSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:MonoBrick.EV3.TouchSensor.Read">
            <summary>
            Read the value. In bump mode this will return the count
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.TouchSensor.Reset">
            <summary>
            Reset the bumb count
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.TouchSensor.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="T:MonoBrick.EV3.Color">
            <summary>
            Colors that can be read from the  EV3 color sensor
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.ColorMode">
            <summary>
            Sensor mode when using a EV3 color sensor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ColorMode.Reflection">
            <summary>
            Use the color sensor to read reflected light
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ColorMode.Ambient">
            <summary>
            Use the color sensor to detect the light intensity
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ColorMode.Color">
            <summary>
            Use the color sensor to distinguish between eight different colors
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ColorMode.Raw">
            <summary>
            Read the raw value of the reflected light
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ColorMode.NXTGreen">
            <summary>
            Activate the green light on the color sensor. Only works with the NXT Color sensor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.ColorMode.NXTBlue">
            <summary>
            Activate the green blue on the color sensor. Only works with the NXT Color sensor
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.ColorSensor">
            <summary>
            Class for EV3 and NXT Color sensor
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.ColorSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.ColorSensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.ColorSensor.#ctor(MonoBrick.EV3.ColorMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.ColorSensor" /> class.
            </summary>
            <param name="mode">Mode.</param>
        </member>
        <member name="P:MonoBrick.EV3.ColorSensor.Mode">
            <summary>
            Gets or sets the color mode.
            </summary>
            <value>The color mode.</value>
        </member>
        <member name="M:MonoBrick.EV3.ColorSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:MonoBrick.EV3.ColorSensor.Read">
            <summary>
            Read the intensity of the reflected light
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.ColorSensor.ReadColor">
            <summary>
            Reads the color.
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="T:MonoBrick.EV3.IRMode">
            <summary>
            Sensor mode when using a EV3 IR Sensor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.IRMode.Proximity">
            <summary>
            Use the IR sensor as a distance sensor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.IRMode.Seek">
            <summary>
            Use the IR sensor to detect the location of the IR Remote
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.IRMode.Remote">
            <summary>
            Use the IR sensor to detect wich Buttons where pressed on the IR Remote
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.IRSensor">
            <summary>
            Class for the EV3 IR sensor - In seek or remote mode it only works with channel 0
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.IRSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.IRSensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.IRSensor.#ctor(MonoBrick.EV3.IRMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.IRSensor" /> class.
            </summary>
            <param name="mode">Mode.</param>
        </member>
        <member name="P:MonoBrick.EV3.IRSensor.Mode">
            <summary>
            Gets or sets the IR mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="M:MonoBrick.EV3.IRSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:MonoBrick.EV3.IRSensor.Read">
            <summary>
            Read the value of the sensor. The result will vary depending on the mode
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.LightMode">
            <summary>
            Sensor mode when using a NXT light sensor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.LightMode.Relection">
            <summary>
            Use the lgith sensor to read reflected light
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.LightMode.Ambient">
            <summary>
            Use the light sensor to detect the light intensity
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.LightSensor">
            <summary>
            Class for the NXT light sensor
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.LightSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.LightSensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.LightSensor.#ctor(MonoBrick.EV3.LightMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.LightSensor" /> class.
            </summary>
            <param name="mode">Mode.</param>
        </member>
        <member name="P:MonoBrick.EV3.LightSensor.Mode">
            <summary>
            Gets or sets the light mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="M:MonoBrick.EV3.LightSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:MonoBrick.EV3.LightSensor.Read">
            <summary>
            Read this instance.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.LightSensor.ReadRaw">
            <summary>
            Reads the raw sensor value.
            </summary>
            <returns>The raw sensor value.</returns>
        </member>
        <member name="T:MonoBrick.EV3.SoundMode">
            <summary>
            Sensor mode when using a sound sensor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.SoundMode.SoundDBA">
            <summary>
            The sound level is measured in A-weighting decibel
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.SoundMode.SoundDB">
            <summary>
            The sound level is measured in decibel
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.SoundSensor">
            <summary>
            Class for the NXT sound sensor
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.SoundSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.SoundSensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.SoundSensor.#ctor(MonoBrick.EV3.SoundMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.SoundSensor" /> class.
            </summary>
            <param name="mode">Mode.</param>
        </member>
        <member name="M:MonoBrick.EV3.SoundSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:MonoBrick.EV3.SoundSensor.Read">
            <summary>
            Read the sensor value
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.SoundSensor.ReadRaw">
            <summary>
            Reads the raw sensor value
            </summary>
            <returns>The raw value.</returns>
        </member>
        <member name="P:MonoBrick.EV3.SoundSensor.Mode">
            <summary>
            Gets or set the sound mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="T:MonoBrick.EV3.UltrasonicMode">
            <summary>
            Sensor modes when using a ultrasonic sensor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.UltrasonicMode.Centimeter">
            <summary>
            Result will be in centimeter
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.UltrasonicMode.Inch">
            <summary>
            Result will be in inch
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.UltrasonicMode.Listen">
            <summary>
            Sensor is in listen mode
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.UltrasonicSensor">
            <summary>
            Class for the EV3 and NXT ultrasonic sensor
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.UltrasonicSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.UltrasonicSensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.UltrasonicSensor.#ctor(MonoBrick.EV3.UltrasonicMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.UltrasonicSensor" /> class.
            </summary>
            <param name="mode">Mode.</param>
        </member>
        <member name="P:MonoBrick.EV3.UltrasonicSensor.Mode">
            <summary>
            Gets or sets the ultrasonic mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="M:MonoBrick.EV3.UltrasonicSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:MonoBrick.EV3.UltrasonicSensor.Read">
            <summary>
            Read the sensor value. Result depends on the mode
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.TemperatureMode">
            <summary>
            Sensor modes when using a Temperature sensor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.TemperatureMode.Celcius">
            <summary>
            Result will be in celcius
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.TemperatureMode.Fahrenheit">
            <summary>
            Result will be in fahrenheit
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.TemperatureSensor">
            <summary>
            Class for the EV3 temperature sensor
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.TemperatureSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.TemperatureSensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.TemperatureSensor.#ctor(MonoBrick.EV3.TemperatureMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.TemperatureSensor" /> class.
            </summary>
            <param name="mode">Mode.</param>
        </member>
        <member name="P:MonoBrick.EV3.TemperatureSensor.Mode">
            <summary>
            Gets or sets the temperature mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="M:MonoBrick.EV3.TemperatureSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:MonoBrick.EV3.TemperatureSensor.ReadTemperature">
            <summary>
            Read the temperature.
            </summary>
            <returns>The temperature.</returns>
        </member>
        <member name="T:MonoBrick.EV3.GyroMode">
            <summary>
            Sensor modes when using a Gyro sensor
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.GyroMode.Angle">
            <summary>
            Result will be in degrees
            </summary>
        </member>
        <member name="F:MonoBrick.EV3.GyroMode.AngularVelocity">
            <summary>
            Result will be in degrees per second
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.GyroSensor">
            <summary>
            Class for the EV3 gyro sensor
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.GyroSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.GyroSensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.GyroSensor.#ctor(MonoBrick.EV3.GyroMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.EV3.GyroSensor" /> class.
            </summary>
            <param name="mode">Mode.</param>
        </member>
        <member name="P:MonoBrick.EV3.GyroSensor.Mode">
            <summary>
            Gets or sets the gyro mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="M:MonoBrick.EV3.GyroSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:MonoBrick.EV3.GyroSensor.Read">
            <summary>
            Read the sensor value. The result will depend on the mode
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.SensorHelper">
            <summary>
            Class to help with sensor setup
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.SensorHelper.SensorDictionary">
            <summary>
            Gets a dictionary of sensors that has been implemented. Can be use in a combobox or simular
            </summary>
            <value>The sensor dictionary.</value>
        </member>
        <member name="M:MonoBrick.EV3.SensorHelper.TypeToKey(MonoBrick.EV3.SensorType)">
            <summary>
            Convert a sensor type a to dictionary key.
            </summary>
            <returns>A dictionary key that can be used with the sensor dictionary. If no match is found an empty string is returned</returns>
            <param name="type">Sensor type to convert.</param>
        </member>
        <member name="T:MonoBrick.NXT.DeviceInfo">
            <summary>
            Class that holds the brick device information
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.DeviceInfo.#ctor(System.String,System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.DeviceInfo" /> class.
            </summary>
            <param name="name">
            The name of the brick
            </param>
            <param name="address">
            The bluetooth address of the brick
            </param>
            <param name="flashSize">
            Available flash memory in bytes
            </param>
        </member>
        <member name="P:MonoBrick.NXT.DeviceInfo.BrickName">
            <summary>
            Gets the name of the brick.
            </summary>
            <value>
            The name of the brick.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.DeviceInfo.BluetoothAddress">
            <summary>
            Gets the bluetooth address.
            </summary>
            <value>
            The bluetooth address.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.DeviceInfo.FreeFlashMemory">
            <summary>
            Gets the free flash memory in bytes
            </summary>
            <value>
            The free flash memory.
            </value>
        </member>
        <member name="T:MonoBrick.NXT.DeviceFirmware">
            <summary>
            Holds information about the firmware
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.DeviceFirmware.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.DeviceFirmware" /> class.
            </summary>
            <param name="firmwareVersion">
            Firmware version.
            </param>
            <param name="protocolVersion">
            Protocol version.
            </param>
        </member>
        <member name="P:MonoBrick.NXT.DeviceFirmware.ProtocolVersion">
            <summary>
            Gets the protocol version.
            </summary>
            <value>
            The protocol version.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.DeviceFirmware.FirmwareVersion">
            <summary>
            Gets the firmware version.
            </summary>
            <value>
            The firmware version.
            </value>
        </member>
        <member name="T:MonoBrick.NXT.Brick`4">
            <summary>
            Class for NXT brick
            </summary>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.Mailbox">
            <summary>
            Message system used to write and read data to/from the brick
            </summary>
            <value>
            The message system
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.MotorA">
            <summary>
            Motor A
            </summary>
            <value>
            The motor connected to port A
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.MotorB">
            <summary>
            Motor B
            </summary>
            <value>
            The motor connected to port B
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.MotorC">
            <summary>
            Motor C
            </summary>
            <value>
            The motor connected to port C
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.Vehicle">
            <summary>
            Use the brick as a vehicle
            </summary>
            <value>
            The vehicle
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.Sensor1">
            <summary>
            Gets or sets the sensor connected to port 1
            </summary>
            <value>
            The sensor connected to port 1
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.Sensor2">
            <summary>
            Gets or sets the sensor connected to port 2
            </summary>
            <value>
            The sensor connected to port 2
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.Sensor3">
            <summary>
            Gets or sets the sensor connected to port 3
            </summary>
            <value>
            The sensor connected to port 3
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.Sensor4">
            <summary>
            Gets or sets the sensor connected to port 4
            </summary>
            <value>
            The sensor connected to port 4
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.FileSystem">
            <summary>
            The file system
            </summary>
            <value>
            The file system
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Brick`4.Connection">
            <summary>
            Gets the connection that the brick uses
            </summary>
            <value>
            The connection
            </value>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.#ctor(MonoBrick.Connection{MonoBrick.NXT.Command,MonoBrick.NXT.Reply})">
            <summary>
            Initializes a new instance of the Brick class.
            </summary>
            <param name="connection">
            Connection to use
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Brick class with bluetooth, usb or loopback connection
            </summary>
            <param name="connection">
            Can either be a serial port name for bluetooth connection or "usb" for usb connection and finally "loopback" for loopback connection
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.#ctor(System.String,System.UInt16)">
            <summary>
            Initializes a new instance of the Brick class with a tunnel connection
            </summary>
            <param name="ipAddress">
            The IP address to use
            </param>
            <param name="port">
            The port number to use
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.SetBrickName(System.String)">
            <summary>
            Sets the name of the brick.
            </summary>
            <param name="name">
            The new name of the brick
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.SetBrickName(System.String,System.Boolean)">
            <summary>
            Sets the name of the brick.
            </summary>
            <param name="name">
            The new name of the brick
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.GetDeviceInfo">
            <summary>
            Gets the device info of the brick
            </summary>
            <returns>
            The device info
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.GetBrickName">
            <summary>
            Gets the name of the brick.
            </summary>
            <returns>
            The brick name
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.GetBluetoothAddress">
            <summary>
            Gets the bluetooth address.
            </summary>
            <returns>
            The bluetooth address
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.GetFreeFlashMemory">
            <summary>
            Gets the free flash memory in bytes
            </summary>
            <returns>
            The free flash memory in bytes
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.GetBatteryLevel">
            <summary>
            Gets the battery level in mV
            </summary>
            <returns>
            The battery level in mV
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.StartProgram(System.String)">
            <summary>
            Start a program on the brick
            </summary>
            <param name="name">
            The name of the program to start
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.StartProgram(System.String,System.Boolean)">
            <summary>
            Starts a program on the brick
            </summary>
            <param name="name">
            The of the program to start
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.StopProgram">
            <summary>
            Stops all running programs
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.StopProgram(System.Boolean)">
            <summary>
            Stops all running programs
            </summary>
            <param name="reply">
            If set to <c>true</c> reply the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.GetRunningProgram">
            <summary>
            Get the name of the program that is curently running
            </summary>
            <returns>
            The running program.
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.PlayTone(System.UInt16,System.UInt16)">
            <summary>
            Play a tone
            </summary>
            <param name="frequency">
            Frequency of the tone
            </param>
            <param name="durationMs">
            Duration in ms
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.PlayTone(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            Play a tone
            </summary>
            <param name="frequency">
            Frequency of the tone
            </param>
            <param name="durationMs">
            Duration in ms
            </param>
            <param name="reply">
            If set to <c>true</c> reply the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.Beep(System.UInt16)">
            <summary>
            Make the brick say beep
            </summary>
            <param name="durationMs">
            Duration in ms
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.Beep(System.UInt16,System.Boolean)">
            <summary>
            Make the brick say beep
            </summary>
            <param name="durationMs">
            Duration in ms
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply.
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.PlaySoundFile(System.String,System.Boolean)">
            <summary>
            Play a sound file
            </summary>
            <param name="name">
            The name of the sound file to play
            </param>
            <param name="loop">
            If set to <c>true</c> the sound file will loop
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.PlaySoundFile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Play a sound file
            </summary>
            <param name="name">
            The name of the sound file to play
            </param>
            <param name="loop">
            If set to <c>true</c> the sound file will loop
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply.
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.GetDeviceFirmware">
            <summary>
            Gets information about the NXT's firmware
            </summary>
            <returns>
            The device firmware class
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.GetFirmwareVersion">
            <summary>
            Gets the firmware version.
            </summary>
            <returns>
            The firmware version
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.GetProtocolVersion">
            <summary>
            Gets the protocol version.
            </summary>
            <returns>
            The protocol version
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.KeepAlive">
            <summary>
            Get information about the keep alive settings
            </summary>
            <returns>
            The time in minuts that the brick will stay alive
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Brick`4.ResetBluetoothSettings(System.Boolean)">
            <summary>
            Resets the bluetooth settings
            </summary>
            <param name="reply">
            If set to <c>true</c> nxt will send a reply
            </param>
        </member>
        <member name="T:MonoBrick.NXT.CommandType">
            <summary>
            NXT command types
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.CommandType.DirecCommand">
            <summary>
            Direct LEGO command.
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.CommandType.SystemCommand">
            <summary>
            LEGO system command
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.CommandType.ReplyCommand">
            <summary>
            Reply command
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.CommandType.TunnelCommand">
            <summary>
            A tunnel command
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.CommandByte">
            <summary>
            NXT and tunnel commands
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.Command">
            <summary>
            Class for creating a NXT command.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Command.#ctor(MonoBrick.NXT.CommandType,MonoBrick.NXT.CommandByte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Command" /> class.
            </summary>
            <param name="type">
            The command type. Can be a system command, direct command or reply command
            </param>
            <param name="commandByte">
            The command byte
            </param>
            <param name="reply">
            If set to <c>true</c> the NXT will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Command.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Command" /> class using an array of bytes
            </summary>
            <param name="data">
            The data to be used for the command
            </param>
        </member>
        <member name="P:MonoBrick.NXT.Command.CommandByte">
            <summary>
            Gets the command byte
            </summary>
            <value>
            The command byte
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Command.CommandType">
            <summary>
            Gets type of the command
            </summary>
            <value>
            The command type. Can be a system command, direct command or reply command
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Command.CommandByteAsString">
            <summary>
            Gets the command byte as string.
            </summary>
            <value>
            The command byte as string.
            </value>
        </member>
        <member name="T:MonoBrick.NXT.Reply">
            <summary>
            Class for creating a NXT reply
            </summary>
        </member>
        <member name="P:MonoBrick.NXT.Reply.HasError">
            <summary>
            Gets a value indicating whether this instance has error.
            </summary>
            <value>
                <c>true</c> if this instance has error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Reply.ErrorType">
            <summary>
            Gets the type of error.
            </summary>
            <value>
            The type of error
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Reply.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <value>
            The error code
            </value>
        </member>
        <member name="M:MonoBrick.NXT.Reply.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Reply" /> class with no payload
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Reply.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Reply" /> class.
            </summary>
            <param name="data">
            The byte array to be used for the reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Reply.#ctor(MonoBrick.NXT.CommandType,MonoBrick.NXT.CommandByte,System.Byte[],System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Reply" /> class.
            </summary>
            <param name="type">
            The command type. Can be a system command, direct command or reply command
            </param>
            <param name="command">
            The command byte
            </param>
            <param name="data">
            Byte array to be used for reply payload
            </param>
            <param name="errorCode">
            Error code
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Reply.#ctor(MonoBrick.NXT.CommandType,MonoBrick.NXT.CommandByte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Reply" /> class without errors
            </summary>
            <param name="type">
            The command type. Can be a system command, direct command or reply command
            </param>
            <param name="command">
            The command byte
            </param>
            <param name="data">
            Byte array to be used for reply payload
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Reply.#ctor(MonoBrick.NXT.CommandType,MonoBrick.NXT.CommandByte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Reply" /> class without payload and errors
            </summary>
            <param name="type">
            The command type. Can be a system command, direct command or reply command
            </param>
            <param name="command">
            The command byte
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Reply.#ctor(MonoBrick.NXT.CommandType,MonoBrick.NXT.CommandByte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Reply" /> class without payload with an error code
            </summary>
            <param name="type">
            The command type. Can be a system command, direct command or reply command
            </param>
            <param name="command">
            The command byte
            </param>
            <param name="errorCode">
            Error code
            </param>
        </member>
        <member name="P:MonoBrick.NXT.Reply.CommandByte">
            <summary>
            Gets the command byte.
            </summary>
            <value>
            The command byte
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Reply.CommandByteAsString">
            <summary>
            Gets the command byte as string.
            </summary>
            <value>
            The command byte as string
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Reply.CommandType">
            <summary>
            The command type. Can be a system command, direct command or reply command
            </summary>
            <value>
            The type of the command.
            </value>
        </member>
        <member name="T:MonoBrick.NXT.BrickError">
            <summary>
            Error coes from the NXT brick
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.BrickException">
            <summary>
            Exceptions from NXT brick
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.BrickException.#ctor(MonoBrick.NXT.BrickError)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.BrickException" /> class.
            </summary>
            <param name="error">
            Brick Error.
            </param>
        </member>
        <member name="M:MonoBrick.NXT.BrickException.#ctor(MonoBrick.NXT.BrickError,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:MonoBrick.NXT.BrickException" /></summary>
            <param name="error">
            Brick error
            </param>
            <param name="inner">
            Inner exception
            </param>
        </member>
        <member name="T:MonoBrick.NXT.Error">
            <summary>
            Class used to throw an NXT exception from monoBrick
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Error.ThrowException(System.Byte,MonoBrick.ErrorType)">
            <summary>
            Throws an monobrick related exception based on errorCode and errorType
            </summary>
            <param name="errorCode">
            Error code
            </param>
            <param name="type">
            Error type
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Error.ThrowException(MonoBrick.NXT.Reply)">
            <summary>
            Throws a monobrick exception based on the Reply from the brick
            </summary>
            <param name="reply">
            Reply to base the exception on
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Error.ThrowException(System.Byte)">
            <summary>
            Throws a monobrick exception based on the error code
            </summary>
            <param name="errorCode">
            Error code to base the exception on
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Error.ToErrorType(System.Byte@)">
            <summary>
            Convert errorCode to ErrorType
            </summary>
            <returns>
            The error type
            </returns>
            <param name="errorCode">
            Error code
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Error.CheckForError(MonoBrick.NXT.Reply,System.Byte)">
            <summary>
            Checks a reply for error. If reply has error relevant exception is thrown
            </summary>
            <param name="reply">
            The reply to check
            </param>
            <param name="expectedLength">
            Expected reply length
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Error.CheckForError(MonoBrick.NXT.Reply,System.Byte,MonoBrick.NXT.Error.CleanUpMethod)">
            <summary>
            Checks a reply for error. If reply has error relevant exception is thrown
            </summary>
            <param name="reply">
            The reply to check
            </param>
            <param name="expectedLength">
            Expected reply length
            </param>
            <param name="cleanUp">
            Clean up method called before the exception is thrown
            </param>
        </member>
        <member name="T:MonoBrick.NXT.FileMode">
            <summary>
            File mode
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.FileMode.Fragmented">
            <summary>
            File is fragmented
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.FileMode.NoneFragmented">
            <summary>
            File is not fragmented
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.FileMode.Data">
            <summary>
            The file can be closed before the whole file is written
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.BrickFile">
            <summary>
            A Brick file
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.BrickFile.#ctor(System.String,System.Byte,System.UInt32)">
            <summary>
            Initializes a new instance of the NXTBrickFile class.
            </summary>
            <param name="name">
            The name of the file
            </param>
            <param name="handle">
            The file handle
            </param>
            <param name="size">
            The size of the file in bytes
            </param>
        </member>
        <member name="M:MonoBrick.NXT.BrickFile.#ctor">
            <summary>
            Initializes a empty instance of the NXTBrickFile class.
            </summary>
        </member>
        <member name="P:MonoBrick.NXT.BrickFile.Name">
            <summary>
            Gets the name of the file
            </summary>
            <value>
            The name of the file
            </value>
        </member>
        <member name="P:MonoBrick.NXT.BrickFile.Handle">
            <summary>
            Gets the file handle.
            </summary>
            <value>
            The file handle
            </value>
        </member>
        <member name="P:MonoBrick.NXT.BrickFile.Size">
            <summary>
            Gets the size
            </summary>
            <value>
            The size in bytes
            </value>
        </member>
        <member name="P:MonoBrick.NXT.BrickFile.IsEmpty">
            <summary>
            Gets a value indicating whether the file is empty
            </summary>
            <value>
                <c>true</c> if the file is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.BrickFile.Extension">
            <summary>
            Gets the file extension.
            </summary>
            <value>
            The file extension.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.BrickFile.FileType">
            <summary>
            Gets the file type
            </summary>
            <value>
            The file type
            </value>
        </member>
        <member name="T:MonoBrick.NXT.FilSystem">
            <summary>
            Fil system for the NXT brick
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.FilSystem.MaxFileNameLength">
            <summary>
            The max number of bytes for a file name.
            </summary>
        </member>
        <member name="E:MonoBrick.NXT.FilSystem.OnBytesRead">
            <summary>
            Occurs when bytes are read.
            </summary>
        </member>
        <member name="E:MonoBrick.NXT.FilSystem.OnBytesWritten">
            <summary>
            Occurs when bytes are written.
            </summary>
        </member>
        <member name="E:MonoBrick.NXT.FilSystem.OnFlashDeleted">
            <summary>
            Occurs when flash is deleted.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.FileList">
            <summary>
            Get a list of files on the brick
            </summary>
            <returns>
            The list of files
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.FileList(System.String)">
            <summary>
            Get a list of files on the brick
            </summary>
            <returns>
            The list of files
            </returns>
            <param name="wildCard">
            Wild card to list i.e. *.rso; *.rxe...
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.Write(MonoBrick.NXT.BrickFile,System.Byte[])">
            <summary>
            Write a byte array to a file
            </summary>
            <param name="file">
            The file
            </param>
            <param name="data">
            Data to write
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.Read(MonoBrick.NXT.BrickFile)">
            <summary>
            Read all bytes from a file
            </summary>
            <param name="file">
            The file to read from
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.Read(MonoBrick.NXT.BrickFile,System.UInt16)">
            <summary>
            Read a specefic number of bytes from a file
            </summary>
            <param name="file">
            The file to read from
            </param>
            <param name="bytesToRead">
            Bytes to read
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.OpenWrite(System.String,System.UInt32)">
            <summary>
            Opens file for write in fragmented mode. If file exist it is overwritten
            </summary>
            <returns>
            The file
            </returns>
            <param name="fileName">
            The name of the file
            </param>
            <param name="fileSize">
            The size of the file
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.OpenWrite(System.String,System.UInt32,MonoBrick.NXT.FileMode)">
            <summary>
            Opens file for write. If file exist it is overwritten
            </summary>
            <returns>
            The file.
            </returns>
            <param name="fileName">
            The name of the file
            </param>
            <param name="fileSize">
            File size in bytes
            </param>
            <param name="fileType">
            File mode when opening
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.OpenRead(System.String)">
            <summary>
            Opens file for read.
            </summary>
            <returns>
            The file
            </returns>
            <param name="fileName">
            File name
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.OpenAppend(System.String)">
            <summary>
            Opens file to append data
            </summary>
            <returns>
            The file
            </returns>
            <param name="fileName">
            File name
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.CloseFile(MonoBrick.NXT.BrickFile)">
            <summary>
            Closes the file.
            </summary>
            <param name="file">
            File to close
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.DeleteFile(MonoBrick.NXT.BrickFile)">
            <summary>
            Deletes file.
            </summary>
            <param name="file">
            File to delete
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.DeleteFile(System.String)">
            <summary>
            Deletes file.
            </summary>
            <param name="fileName">
            Name of file to delete
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.DeleteFlash">
            <summary>
            Deletes flash memory
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.GetFreeFlashMemory">
            <summary>
            Gets the size of the free flash memory in bytes
            </summary>
            <returns>
            The amount of free flash in bytes
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.UploadFile(System.String,System.String)">
            <summary>
            Upload a file to the brick
            </summary>
            <param name="fileToUpload">
            File name that should be uploaded to the brick
            </param>
            <param name="brickFileName">
            File name that the file will have on the brick
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.DownloadFile(System.String,MonoBrick.NXT.BrickFile)">
            <summary>
            Downloads a file from the brick
            </summary>
            <param name="destinationFileName">
            Destination file name
            </param>
            <param name="brickFile">
            Brick file to download
            </param>
        </member>
        <member name="M:MonoBrick.NXT.FilSystem.DownloadFile(System.String,System.String)">
            <summary>
            Downloads a file from the brick
            </summary>
            <param name="destinationFileName">
            Destination file name
            </param>
            <param name="brickFileName">
            The name of the file on the brick to download
            </param>
        </member>
        <member name="T:MonoBrick.NXT.I2CMode">
            <summary>
            Sensor mode when using a temperature sensor
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.I2CBase">
            <summary>
            Abstract class to use for I2C sensors
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.#ctor(MonoBrick.NXT.I2CMode,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.I2CSensor" /> class.
            </summary>
            <param name="mode">
            I2C mode
            </param>
            <param name="sensorAddress">
            I2C address.
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.#ctor(MonoBrick.NXT.I2CMode,System.Byte,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.I2CSensor" /> class.
            </summary>
            <param name="mode">
            I2C mode
            </param>
            <param name="sensorAddress">
            I2C address.
            </param>
            <param name="pollInterval">
            Poll interval between checking for new values. This may need some tweaking depending on the sensor
            </param>
        </member>
        <member name="P:MonoBrick.NXT.I2CBase.I2CAddress">
            <summary>
            Gets the i2C address
            </summary>
            <value>
            The i2C address.
            </value>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.Initialize">
            <summary>
            Initialize the sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.ReadRegister(System.Byte)">
            <summary>
            Reads a 8 byte register from the sensor
            </summary>
            <returns>
            The bytes that was read
            </returns>
            <param name="register">
            Register to read
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.ReadRegister(System.Byte,System.Byte)">
            <summary>
            Reads a register from the sensor
            </summary>
            <returns>
            The bytes that was read
            </returns>
            <param name="register">
            Register to read
            </param>
            <param name="rxLength">
            The number of bytes to read
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.WriteRegister(System.Byte,System.Byte)">
            <summary>
            Writes a byte to a register.
            </summary>
            <param name="register">
            Register to write to
            </param>
            <param name="data">
            Data byte to write
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.WriteRegister(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Writes a byte to a register.
            </summary>
            <param name="register">
            Register to write to
            </param>
            <param name="data">
            Data byte to write
            </param>
            <param name="reply">
            If set to <c>true</c> brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>
            The value as a string
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.Reset(System.Boolean)">
            <summary>
            Reset the sensor
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.I2CWrite(System.Byte[],System.Byte)">
            <summary>
            Write byte array to sensor
            </summary>
            <param name="txData">
            The byte array to write
            </param>
            <param name="rxLength">
            The length of the expected reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.I2CWrite(System.Byte[],System.Byte,System.Boolean)">
            <summary>
            Write byte array to sensor
            </summary>
            <param name="txData">
            The byte array to write
            </param>
            <param name="rxLength">
            The length of the expected reply
            </param>
            <param name="reply">
            If set to <c>true</c> brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CBase.I2CWriteAndRead(System.Byte[],System.Byte)">
            <summary>
            Write and read an array of bytes to sensor
            </summary>
            <returns>
            The bytes that was read
            </returns>
            <param name="data">
            Byte array to write
            </param>
            <param name="rxLength">
            Length of the expected reply
            </param>
        </member>
        <member name="T:MonoBrick.NXT.I2CSensor">
            <summary>
            I2C sensor class for reading and writing to a I2C sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.I2CSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.I2CSensor" /> class with I2C address 0x02
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.I2CSensor.#ctor(MonoBrick.NXT.I2CMode,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.I2CSensor" /> class.
            </summary>
            <param name="mode">
            9v or normal mode
            </param>
            <param name="sensorAddress">
            Sensor I2C address
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CSensor.#ctor(MonoBrick.NXT.I2CMode,System.Byte,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.I2CSensor" /> class.
            </summary>
            <param name="mode">
            9v or normal mode
            </param>
            <param name="sensorAddress">
            Sensor I2C address.
            </param>
            <param name="pollInterval">
            Poll interval between checking for new values. This may need some tweaking depending on the sensor
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CSensor.ReadRegister(System.Byte)">
            <summary>
            Reads 8bytes from the sensor register.
            </summary>
            <returns>
            The bytes read from the register
            </returns>
            <param name="register">
            Register address to start reading from
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CSensor.ReadRegister(System.Byte,System.Byte)">
            <summary>
            Reads x bytes from the sensor register.
            </summary>
            <returns>
            The bytes read from the register
            </returns>
            <param name="register">
            Register address to start reading from
            </param>
            <param name="rxLength">
            Number of bytes to to read from the register
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CSensor.WriteRegister(System.Byte,System.Byte)">
            <summary>
            Writes to the sensor register.
            </summary>
            <param name="register">
            Register to write to
            </param>
            <param name="data">
            Data byte to write
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CSensor.WriteRegister(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Writes to the sensor register.
            </summary>
            <param name="register">
            Register to write to
            </param>
            <param name="data">
            Data byte to write
            </param>
            <param name="reply">
            If set to <c>true</c> reply from the brick will be send
            </param>
        </member>
        <member name="M:MonoBrick.NXT.I2CSensor.ReadAsString">
            <summary>
            Is not implemented
            </summary>
            <returns>
            An empty string
            </returns>
        </member>
        <member name="T:MonoBrick.NXT.SonarMode">
            <summary>
            Sensor mode when using a Sonar sensor
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.SonarMode.Centimeter">
            <summary>
            Result will be in centimeter
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.SonarMode.CentiInch">
            <summary>
            Result will be in centi-inch
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.Sonar">
            <summary>
            Sonar sensor
            </summary>
        </member>
        <member name="P:MonoBrick.NXT.Sonar.Mode">
            <summary>
            Gets or sets the sonar mode.
            </summary>
            <value>
            The sonar mode
            </value>
        </member>
        <member name="M:MonoBrick.NXT.Sonar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Sonar" /> class in centimeter mode
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Sonar.#ctor(MonoBrick.NXT.SonarMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Sonar" /> class.
            </summary>
            <param name="mode">
            The sonar mode
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Sonar.Initialize">
            <summary>
            Initialize the sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Sonar.ReadDistance">
            <summary>
            Read the distance in either centiinches or centimeter
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Sonar.SingleShot(System.Boolean)">
            <summary>
            Fire a single shot
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Sonar.Off(System.Boolean)">
            <summary>
            Turn off the sonar to save power
            </summary>
            <param name="reply">
            If set to <c>true</c> brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Sonar.Continuous(System.Boolean)">
            <summary>
            Do Continuous measurements
            </summary>
            <param name="reply">
            If set to <c>true</c> brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Sonar.IsOff">
            <summary>
            Determines whether sonar is off.
            </summary>
            <returns>
                <c>true</c> if sonar is off; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Sonar.Reset(System.Boolean)">
            <summary>
            Reset the sensor
            </summary>
            <param name="reply">
            If set to <c>true</c> brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Sonar.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>
            The value as a string
            </returns>
        </member>
        <member name="T:MonoBrick.NXT.RGBColor">
            <summary>
            Class that holds RGB colors
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.RGBColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.RGBColor" /> class.
            </summary>
            <param name="red">
            Red value
            </param>
            <param name="green">
            Green value
            </param>
            <param name="blue">
            Blue value
            </param>
        </member>
        <member name="P:MonoBrick.NXT.RGBColor.Red">
            <summary>
            Gets the red value
            </summary>
            <value>
            The red value
            </value>
        </member>
        <member name="P:MonoBrick.NXT.RGBColor.Green">
            <summary>
            Gets the green value
            </summary>
            <value>
            The green value
            </value>
        </member>
        <member name="P:MonoBrick.NXT.RGBColor.Blue">
            <summary>
            Gets the blue value
            </summary>
            <value>
            The blue value
            </value>
        </member>
        <member name="T:MonoBrick.NXT.HiTecColor">
            <summary>
            HiTechnic color sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.HiTecColor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecColor.Initialize">
            <summary>
            Initialize this sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecColor.ReadColorIndex">
            <summary>
            Returns the color index number (more on http://www.hitechnic.com/)
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecColor.ReadRGBColor">
            <summary>
            Reads the RGB colors.
            </summary>
            <returns>
            The RGB colors
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.HiTecColor.ReadNormalizedRGBColor">
            <summary>
            Reads the normalized RGB colors
            </summary>
            <returns>
            The normalized RGB colors
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.HiTecColor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>
            The value as a string
            </returns>
        </member>
        <member name="T:MonoBrick.NXT.Position">
            <summary>
            X Y Z position
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Position.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Position" /> class.
            </summary>
            <param name="x">
            The x coordinate.
            </param>
            <param name="y">
            The y coordinate.
            </param>
            <param name="z">
            The z coordinate.
            </param>
        </member>
        <member name="P:MonoBrick.NXT.Position.X">
            <summary>
            Gets the x coordinate
            </summary>
            <value>
            The x coordinate
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Position.Y">
            <summary>
            Gets the y coordinate
            </summary>
            <value>
            The y coordinate
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Position.Z">
            <summary>
            Gets the z coordinate
            </summary>
            <value>
            The z coordinate
            </value>
        </member>
        <member name="T:MonoBrick.NXT.HiTecTilt">
            <summary>
            HiTechnic tilt sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecTilt.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.HiTecTilt" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecTilt.Initialize">
            <summary>
            Initialize the sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecTilt.ReadPosition">
            <summary>
            Reads the X Y Z position
            </summary>
            <returns>
            The X Y Z position
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.HiTecTilt.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>
            The value as a string
            </returns>
        </member>
        <member name="T:MonoBrick.NXT.HiTecCompass">
            <summary>
            HiTechnic tilt compass sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecCompass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.HiTecCompass" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecCompass.Initialize">
            <summary>
            Initialize the sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecCompass.ReadDirection">
            <summary>
            Read the direction of the compass
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecCompass.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>
            The value as a string
            </returns>
        </member>
        <member name="T:MonoBrick.NXT.PCF8574">
            <summary>
            PCF8574 I/O chip
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.PCF8574.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.PCF8574" /> class with I2C address  0×20
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.PCF8574.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.PCF8574" /> class.
            </summary>
            <param name="address">
            I2c address
            </param>
        </member>
        <member name="M:MonoBrick.NXT.PCF8574.Initialize">
            <summary>
            Initialize the sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.PCF8574.Read">
            <summary>
            Read the pins from the sensor (0-255)
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.PCF8574.Write(System.Byte)">
            <summary>
            Write to sensor
            </summary>
            <param name="set">
            Pins to set (0-255)
            </param>
        </member>
        <member name="M:MonoBrick.NXT.PCF8574.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>
            The value as a string
            </returns>
        </member>
        <member name="T:MonoBrick.NXT.ADCPort">
            <summary>
            ADC port for use with the PCF8591 I2C chip
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.PCF8591">
            <summary>
            PCF8591 chip with four input and four output ports
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.PCF8591.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.PCF8591" /> class with I2C address 0x20
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.PCF8591.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.PCF8591" /> class.
            </summary>
            <param name="address">
            I2C Address
            </param>
        </member>
        <member name="M:MonoBrick.NXT.PCF8591.Initialize">
            <summary>
            Initialize the sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.PCF8591.Read">
            <summary>
            Always returns 0 use other read function
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.PCF8591.Read(MonoBrick.NXT.ADCPort)">
            <summary>
            Read the value on the specified port
            </summary>
            <param name="port">
            Port to read from
            </param>
        </member>
        <member name="M:MonoBrick.NXT.PCF8591.Write(MonoBrick.NXT.ADCPort,System.Byte)">
            <summary>
            Write to the chip
            </summary>
            <param name="port">
            Port to write to
            </param>
            <param name="value">
            Value to write
            </param>
        </member>
        <member name="M:MonoBrick.NXT.PCF8591.ReadAsString">
            <summary>
            Reads the all ports as a string
            </summary>
            <returns>
            The value of all ports as a string
            </returns>
        </member>
        <member name="T:MonoBrick.NXT.Loopback`2">
            <summary>
            Simulate a NXT connection - far from completed
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Loopback`2.#ctor">
            <summary>
            Initializes a new instance of the NXT Loopback class.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Loopback`2.Open">
            <summary>
            Open the connection
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Loopback`2.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Loopback`2.Send(`0)">
            <summary>
            Send the specified command.
            </summary>
            <param name="command">
            Command to send
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Loopback`2.Receive">
            <summary>
            Receive a reply
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.Box">
            <summary>
            Boxes used for the mailbox system
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.Mailbox">
            <summary>
            Mailbox system for the LEGO Brick
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Mailbox.Send(System.Byte[],MonoBrick.NXT.Box)">
            <summary>
            Send a byte array to the brick's mailbox system
            </summary>
            <param name="data">
            Data array to write to the mailbox
            </param>
            <param name="inbox">
            The mailbox to send to
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Mailbox.Send(System.Byte[],MonoBrick.NXT.Box,System.Boolean)">
            <summary>
            Send a byte array to the bricks mailbox system
            </summary>
            <param name="data">
            Data array to write to the mailbox
            </param>
            <param name="inbox">
            The mailbox to send to
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Mailbox.Send(System.String,MonoBrick.NXT.Box)">
            <summary>
            Send a string to brick's mailbox system
            </summary>
            <param name="s">
            string to write
            </param>
            <param name="inbox">
            The mailbox to send to
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Mailbox.Send(System.String,MonoBrick.NXT.Box,System.Boolean)">
            <summary>
            Send a string to brick's mailbox system
            </summary>
            <param name="s">
            string to write
            </param>
            <param name="inbox">
            The mailbox to send to
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Mailbox.Read(MonoBrick.NXT.Box,System.Boolean)">
            <summary>
            Read a byte array from the brick's mailbox system
            </summary>
            <returns>
            The message as a byte array
            </returns>
            <param name="mailbox">
            The mailbox to read
            </param>
            <param name="removeMessage">
            If set to <c>true</c> the message will be removed from the mailbox
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Mailbox.ReadString(MonoBrick.NXT.Box,System.Boolean)">
            <summary>
            Read a string from the brick's mailbox system
            </summary>
            <returns>
            The message as a string.
            </returns>
            <param name="mailbox">
            The mailbox to read
            </param>
            <param name="removeMessage">
            If set to <c>true</c> the message will be removed from the mailbox
            </param>
        </member>
        <member name="T:MonoBrick.NXT.McNXTBrick`4">
            <summary>
            Class for mindstorms brick
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.McNXTBrick`4.InitMC">
            <summary>
            Initialize the MotorControl program on the brick.
            McMotors will not work if this method was not called beforehand
            </summary>
        </member>
        <member name="P:MonoBrick.NXT.McNXTBrick`4.McMotorA">
            <summary>
            Motor A (MotorControl)
            </summary>
            <value>
            The motor connected to port A
            </value>
        </member>
        <member name="P:MonoBrick.NXT.McNXTBrick`4.McMotorB">
            <summary>
            Motor B (MotorControl)
            </summary>
            <value>
            The motor connected to port B
            </value>
        </member>
        <member name="P:MonoBrick.NXT.McNXTBrick`4.McMotorC">
            <summary>
            Motor C (MotorControl)
            </summary>
            <value>
            The motor connected to port C
            </value>
        </member>
        <member name="P:MonoBrick.NXT.McNXTBrick`4.McMotorAB">
            <summary>
            Motor AB (MotorControl)
            </summary>
            <value>
            The motor connected to ports AB
            </value>
        </member>
        <member name="P:MonoBrick.NXT.McNXTBrick`4.McMotorAC">
            <summary>
            Motor AC (MotorControl)
            </summary>
            <value>
            The motor connected to ports AC
            </value>
        </member>
        <member name="P:MonoBrick.NXT.McNXTBrick`4.McMotorBC">
            <summary>
            Motor BC (MotorControl)
            </summary>
            <value>
            The motor connected to ports BC
            </value>
        </member>
        <member name="P:MonoBrick.NXT.McNXTBrick`4.McMotorABC">
            <summary>
            Motor ABC (MotorControl)
            </summary>
            <value>
            The motor connected to ports ABC
            </value>
        </member>
        <member name="P:MonoBrick.NXT.McNXTBrick`4.MotorControlProxy">
            <summary>
            Gets the motor control proxy.
            </summary>
            <value>
            The motor control proxy.
            </value>
        </member>
        <member name="M:MonoBrick.NXT.McNXTBrick`4.#ctor(MonoBrick.Connection{MonoBrick.NXT.Command,MonoBrick.NXT.Reply})">
            <summary>
            Initializes a new instance of the Brick class.
            </summary>
            <param name="connection">
            Connection to use
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McNXTBrick`4.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Brick class with bluetooth or usb connection
            </summary>
            <param name="connection">
            Can either be a serial port name for bluetooth connection or "usb" for usb connection
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McNXTBrick`4.#ctor(System.String,System.UInt16)">
            <summary>
            Initializes a new instance of the Brick class with a network connection
            </summary>
            <param name="ipAddress">
            The IP address to use
            </param>
            <param name="port">
            The port number to use
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McNXTBrick`4.IsMotorControlOnNxt">
            <summary>
                <para>Queries if the MotorControl-program is on the NXT</para>
            </summary>
            <returns>True if the MotorControl-program is on the NXT, false if not</returns>
        </member>
        <member name="M:MonoBrick.NXT.McNXTBrick`4.UploadMotorControlToNXT">
            <summary>
                <para>Uploads the MotorControl program onto the NXT</para>
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.McNXTBrick`4.IsMotorControlRunningOnNxt">
            <summary>
                <para>Queries if the MotorControl-program is currently running on the NXT.</para>
            </summary>
            <returns>True if the MotorControl-program is running, false if not</returns>
        </member>
        <member name="M:MonoBrick.NXT.McNXTBrick`4.StartMotorControl">
            <summary>
                <para>Starts the MotorControl-program.</para>
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.McNXTBrick`4.StopMotorControl">
            <summary>
                <para>Stops the MotorControl-program.</para>
            </summary>
            <remarks>
                <para>Stops any running program, even it the program is not the MotorControl-program.</para>
            </remarks>
        </member>
        <member name="T:MonoBrick.NXT.McMotor">
            <summary>
            McMotor class
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.McMotor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Motor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.McMotor.On(System.SByte,System.UInt32)">
            <summary>
            Move the motor to a relative position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="degrees">
            The relative position of the motor
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McMotor.On(System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Move the motor to a relative position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="degrees">
            The relative position of the motor
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McMotor.On(System.SByte,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Move the motor to a relative position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="degrees">
            The relative position of the motor
            </param>
            <param name="hold">
            If set to <c>true</c> the motor will actively
            hold the position after finishing.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McMotor.MoveTo(System.Byte,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Moves the motor to an absolute position
            </summary>
            <param name="speed">
            Speed of the motor 0 to 100
            </param>
            <param name="position">
            Absolute position
            </param>
            <param name="hold">
            If set to <c>true</c> the motor will actively
            hold the position after finishing.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McMotor.MoveTo(System.Byte,System.Int32)">
            <summary>
            Moves the motor to an absolute position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="position">
            Absolute position
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McMotor.MoveTo(System.Byte,System.Int32,System.Boolean)">
            <summary>
            Moves the motor to an absolute position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="position">
            Absolute position
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McMotor.IsRunning">
            <summary>
            Determines whether this motor is running.
            </summary>
            <returns>
                <c>true</c> if this motor is running; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoBrick.NXT.McSyncMotor">
            <summary>
            Mc sync motor.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.McSyncMotor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Motor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.McSyncMotor.On(System.SByte,System.UInt32)">
            <summary>
            Move the motor to a relative position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="degrees">
            The relative position of the motor
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McSyncMotor.On(System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Move the motor to a relative position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="degrees">
            The relative position of the motor
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McSyncMotor.On(System.SByte,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Move the motor to a relative position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="degrees">
            The relative position of the motor
            </param>
            <param name="hold">
            If set to <c>true</c> the motor will actively
            hold the position after finishing.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.McSyncMotor.IsRunning">
            <summary>
            Determines whether this motor is running.
            </summary>
            <returns>
                <c>true</c> if this motor is running; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoBrick.NXT.MotorPort">
            <summary>
            Motor ports
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.MotorMode">
            <summary>
            Motor mode
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.MotorRegulation">
            <summary>
            Motor regulation
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.MotorRunState">
            <summary>
            Motor run state
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.OutputState">
            <summary>
            Output state of the motor
            </summary>
        </member>
        <member name="P:MonoBrick.NXT.OutputState.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.OutputState.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.OutputState.Regulation">
            <summary>
            Gets or sets the regulation.
            </summary>
            <value>
            The regulation.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.OutputState.TurnRatio">
            <summary>
            Gets or sets the turn ratio.
            </summary>
            <value>
            The turn ratio.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.OutputState.RunState">
            <summary>
            Gets or sets the state of the run.
            </summary>
            <value>
            The state of the run.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.OutputState.TachoLimit">
            <summary>
            Gets or sets the tacho limit.
            </summary>
            <value>
            The tacho limit.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.OutputState.TachoCount">
            <summary>
            Gets or sets the tacho count.
            </summary>
            <value>
            The tacho count.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.OutputState.BlockTachoCount">
            <summary>
            Gets or sets the block tacho count.
            </summary>
            <value>
            The block tacho count.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.OutputState.RotationCount">
            <summary>
            Gets or sets the rotation count.
            </summary>
            <value>
            The rotation count.
            </value>
        </member>
        <member name="T:MonoBrick.NXT.Motor">
            <summary>
            Motor class
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Motor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Motor" /> class.
            </summary>
        </member>
        <member name="P:MonoBrick.NXT.Motor.Reverse">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoBrick.NXT.Motor" /> run in reverse direction
            </summary>
            <value>
                <c>true</c> if reverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Motor.Sync">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoBrick.NXT.Motor" /> is synchronised with another motor.
            Two motors needs to have this to true in order to work
            </summary>
            <value>
                <c>true</c> if sync; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoBrick.NXT.Motor.SetOutputState(MonoBrick.NXT.OutputState)">
            <summary>
            Sets the output state of the motor
            </summary>
            <param name="state">
            Outputstate
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.SetOutputState(MonoBrick.NXT.OutputState,System.Boolean)">
            <summary>
            Sets the output state of the motor
            </summary>
            <param name="state">
            Outputstate
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.On(System.SByte)">
            <summary>
            Move the motor
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.On(System.SByte,System.Boolean)">
            <summary>
            Move the motor
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.On(System.SByte,System.UInt32)">
            <summary>
            Move the motor to a relative position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="degrees">
            The relative position of the motor
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.On(System.SByte,System.UInt32,System.Boolean)">
            <summary>
            Move the motor to a relative position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="degrees">
            The relative position of the motor
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.Brake">
            <summary>
            Brake the motor (is still on but does not move)
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Motor.Brake(System.Boolean)">
            <summary>
            Brake the motor (is still on but does not move)
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.Off">
            <summary>
            Turn the motor off
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Motor.Off(System.Boolean)">
            <summary>
            Turn the motor off
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.GetOutputState">
            <summary>
            Gets the output state of the motor
            </summary>
            <returns>
            The output state
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Motor.MoveTo(System.Byte,System.Int32,System.Boolean)">
            <summary>
            Moves the motor to an absolute position
            </summary>
            <param name="speed">
            Speed of the motor 0 to 100
            </param>
            <param name="position">
            Absolute position
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.MoveTo(System.Byte,System.Int32)">
            <summary>
            Moves the motor to an absolute position
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="position">
            Absolute position
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.ResetTacho">
            <summary>
            Resets the tacho
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Motor.ResetTacho(System.Boolean)">
            <summary>
            Resets the tacho
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Motor.GetTachoCount">
            <summary>
            Gets the tacho count.
            </summary>
            <returns>
            The tacho count
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Motor.IsRunning">
            <summary>
            Determines whether this motor is running.
            </summary>
            <returns>
                <c>true</c> if this motor is running; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoBrick.NXT.Vehicle">
            <summary>
            Vehicle class
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.#ctor(MonoBrick.NXT.MotorPort,MonoBrick.NXT.MotorPort)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Vehicle" /> class.
            </summary>
            <param name="left">
            The left motor of the vehicle
            </param>
            <param name="right">
            The right motor of the vehicle
            </param>
        </member>
        <member name="P:MonoBrick.NXT.Vehicle.LeftPort">
            <summary>
            Gets or sets the left motor
            </summary>
            <value>
            The left motor
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Vehicle.RightPort">
            <summary>
            Gets or sets the right motor
            </summary>
            <value>
            The right motor
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Vehicle.ReverseLeft">
            <summary>
            Gets or sets a value indicating whether the left motor is running in reverse direction
            </summary>
            <value>
                <c>true</c> if left motor is reverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Vehicle.ReverseRight">
            <summary>
            Gets or sets a value indicating whether the right motor is running in reverse direction
            </summary>
            <value>
                <c>true</c> if right motor is reverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.Backward(System.SByte)">
            <summary>
            Run backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.Backward(System.SByte,System.Boolean)">
            <summary>
            Run backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.Forward(System.SByte)">
            <summary>
            Run forward
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.Forward(System.SByte,System.Boolean)">
            <summary>
            Run forward
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.SpinLeft(System.SByte)">
            <summary>
            Spins the vehicle left.
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.SpinLeft(System.SByte,System.Boolean)">
            <summary>
            Spins the vehicle left.
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.SpinRight(System.SByte)">
            <summary>
            Spins the vehicle right
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.SpinRight(System.SByte,System.Boolean)">
            <summary>
            Spins the vehicle right
            </summary>
            <param name="speed">
            Speed -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.Off(System.Boolean)">
            <summary>
            Stop moving the vehicle
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.Off">
            <summary>
            Stop moving the vehicle
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.Brake">
            <summary>
            Brake the vehicle (the motor is still on but it does not move)
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.Brake(System.Boolean)">
            <summary>
            Brake the vehicle (the motor is still on but it does not move)
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.TurnRightForward(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle right
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.TurnRightForward(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle right
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.TurnRightReverse(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle right will moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.TurnRightReverse(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle right will moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.TurnLeftForward(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle left
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.TurnLeftForward(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle left
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.TurnLeftReverse(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle left will moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Vehicle.TurnLeftReverse(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle left will moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="T:MonoBrick.NXT.MotorControlMotorPort">
            <summary>
                <para>Used as argument for the MotorControl methods.</para>
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.MotorControlMotorPort.PortA">
            <summary>
                <para>Motor port A.</para>
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.MotorControlMotorPort.PortB">
            <summary>
                <para>Motor port B.</para>
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.MotorControlMotorPort.PortC">
            <summary>
                <para>Motor port C.</para>
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.MotorControlMotorPort.PortsAB">
            <summary>
                <para>Motor ports A and B (synced).</para>
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.MotorControlMotorPort.PortsAC">
            <summary>
                <para>Motor ports A and C (synced).</para>
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.MotorControlMotorPort.PortsBC">
            <summary>
                <para>Motor ports B and C (synced).</para>
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.MotorControlMotorPort.PortsABC">
            <summary>
                <para>Motor ports A, B and C (synced).</para>
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.MotorControlProxy">
            <summary>
            Motor control proxy.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.MotorControlProxy.#ctor(MonoBrick.NXT.Mailbox)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.MotorControlProxy" /> class.
            </summary>
            <param name="mailbox">
            Mailbox.
            </param>
        </member>
        <member name="M:MonoBrick.NXT.MotorControlProxy.SendControlledMotorCommand(MonoBrick.NXT.MotorControlMotorPort,System.String,System.String,System.Char)">
            <summary>
                <para>Sends a command to the NXT brick to run CONTROLLED_MOTORCMD - to run the motor(s) with the given parameters.</para>
            </summary>
            <remarks>
                <para>From the MotorControl documentation:</para>
                <para>This is the most important command. It contains a lot of parameters to tell the according motor(s) how and where to move. This is the actual reason MotorControl was developed. However, in certain situations, CLASSIC_MOTORCMD should be used instead (see below why). One of the reasons we have to decide in the high-level-client when to use CONTROLLED_MOTORCMD and when not is that in NXC, CPU-time is valuable, while on a computer we've got plenty!</para>
            </remarks>
            <param name="port">Motor port(s)</param>
            <param name="power">Power - 3 chars from "0" to "200". "0" to "100" = power 0 to 100; "101" to "200" = power -1 to -100.</param>
            <param name="tachoLimit">Tacho limit - 6 chars from "0" to "999999". "0" means driving forever, no limit (better not use it, see also CLASSIC_MOTORCMD); everything else: drive to specific position.</param>
            <param name="mode">Mode: 1 char, bitfield. Compose bits to integer (by OR or +), convert to char - Start with 0x00 (000); Set 0x01 (001) / add 1: Set for HoldBrake (keeps active brake on after end of movement); Set 0x02 (010) / add 2: Set to enable SpeedRegulation; Set 0x04 (100) / add 4: Set to enable SmoothStart.</param>
            <seealso cref="M:MonoBrick.NXT.MotorControlProxy.SendClassicMotorCommand(MonoBrick.NXT.MotorControlMotorPort,System.String,System.String,System.Char)" />
        </member>
        <member name="M:MonoBrick.NXT.MotorControlProxy.ResetErrorCorrection(MonoBrick.NXT.MotorControlMotorPort)">
            <summary>
                <para>Sends a command to the NXT brick to run RESET_ERROR_CORRECTION - to reset the NXT's internal error correction mechanism.</para>
            </summary>
            <remarks>
                <para>From the MotorControl documentation:</para>
                <para>This command can be used to reset the NXT's internal error correction mechanism (i.e. reset the TachoCount property). The same thing can be achieved using the IO map commands (with the output module).</para>
            </remarks>
            <param name="port">Motor port(s)</param>
        </member>
        <member name="M:MonoBrick.NXT.MotorControlProxy.IsMotorReady(MonoBrick.NXT.MotorControlMotorPort)">
            <summary>
                <para>Sends a command to the NXT block to run ISMOTORREADY - query if the motor is ready.</para>
            </summary>
            <remarks>
                <para>From the MotorControl documentation:</para>
                <para>This command is used to determine the state of a single motor: Is it currently executing a command (i.e. moving) or is it ready to accept new commands? Bi-directional communication is used. We send a request and keep asking for the reply (i.e. we poll the computer's inbox). We have to make sure that for each request we make, we also retrieve the answer (to leave MotorControl in a clean state). Please note that we can (in theory) make multiple requests concerning different motors at the same time, as long as we keep polling the incoming mailbox and collect all replies.</para>
            </remarks>
            <param name="port">Motor port</param>
            <returns>True (idle/ready); false (still busy).</returns>
        </member>
        <member name="M:MonoBrick.NXT.MotorControlProxy.SendClassicMotorCommand(MonoBrick.NXT.MotorControlMotorPort,System.String,System.String,System.Char)">
            <summary>
                <para>Sends a command to the NXT brick to run CLASSIC_MOTORCMD - to run the motor(s) with the given parameters.</para>
            </summary>
            <remarks>
                <para>From the MotorControl documentation:</para>
                <para>This command is very similar to the classic SetOutputState: Sometimes we don't need any fance position control algorith, we just want to drive the motors. So this command is used when we have a TachoLimit of 0. Actually we don't have to invoke our NXC MotorControl program at all if we just want to drive without a TachoLimit. We could use SetOutputState, but this is a bit dangerous: It could interfere with a command that's already being executed by MotorControl. For this and some other design reasons, we pass the parameters on to MotorControl just as we do for controlled operations. Another situation when this command is applicable: Stopping in COAST mode, i.e. when you set a TachoLimit, but you want the motor to coast to a very soft stop. Then the NXC program doesn't have to do anything for us. In this case, this command just does a ResetErrorCorrection and a SetOutput for us in NXC.</para>
                <para>Summary: When to use CLASSIC_MOTORCMD (instead of CONTROLLED_MOTORCMD)?</para>
                <list type="bullet">
                    <item>When you've got a TachoLimit = 0.</item>
                    <item>When you want your motor to coast (spin freely) after a TachoLimit has been reached (it will overshoot then).</item>
                    <item>When you want to change the power of a currently running motor, you can use this command to overwrite the power level at runtime (only works if the operation wasn't started with CONTROLLED_MOTORCMD).</item>
                </list>
            </remarks>
            <param name="port">Motor port(s)</param>
            <param name="power">Power - 3 chars from "0" to "200". "0" to "100" = power 0 to 100; "101" to "200" = power -1 to -100.</param>
            <param name="tachoLimit">Tacho limit - 6 chars from "0" to "999999". "0" means driving forever (no limit); everything else: drive to specific position.</param>
            <param name="speedRegulation">Speed regulation. 1 char - "0" = disabled; "1" = enabled.</param>
            <seealso cref="M:MonoBrick.NXT.MotorControlProxy.SendControlledMotorCommand(MonoBrick.NXT.MotorControlMotorPort,System.String,System.String,System.Char)" />
        </member>
        <member name="T:MonoBrick.NXT.SensorPort">
            <summary>
            Sensor ports
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.SensorType">
            <summary>
            Sensor types
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.SensorMode">
            <summary>
            Sensor modes
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.Sensor">
            <summary>
            Analog Sensor class. Works as base class for all NXT sensors
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.Sensor.port">
            <summary>
            The sensor port to use
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.Sensor.connection">
            <summary>
            The connection to use for communication
            </summary>
        </member>
        <member name="P:MonoBrick.NXT.Sensor.Mode">
            <summary>
            The sensor mode to use
            </summary>
        </member>
        <member name="P:MonoBrick.NXT.Sensor.Type">
            <summary>
            The sensor type to use
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.Sensor.hasInit">
            <summary>
            True if sensor has been initialized
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Sensor" /> class with no sensor as type.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.#ctor(MonoBrick.NXT.SensorType,MonoBrick.NXT.SensorMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.Sensor" /> class.
            </summary>
            <param name="sensorType">
            Sensor type
            </param>
            <param name="sensorMode">
            Sensor mode
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.ResetScaledValue">
            <summary>
            Resets the scaled value.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.ResetScaledValue(System.Boolean)">
            <summary>
            Resets the scaled value.
            </summary>
            <param name="reply">
            If set to <c>true</c> brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.UpdateTypeAndMode(MonoBrick.NXT.SensorType,MonoBrick.NXT.SensorMode)">
            <summary>
            Updates the sensor type and mode.
            </summary>
            <param name="sensorType">
            Sensor type.
            </param>
            <param name="sensorMode">
            Sensor mode.
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.GetScaledValue">
            <summary>
            Read mode dependent sensor value
            </summary>
            <returns>
            The scaled value
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.GetRawValue">
            <summary>
            Read device dependent sensor value
            </summary>
            <returns>
            The raw value.
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.GetNormalizedValue">
            <summary>
            Read type dependent sensor value
            </summary>
            <returns>
            The normalized value.
            </returns>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.Initialize">
            <summary>
            Initialize this sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.Reset(System.Boolean)">
            <summary>
            Reset the sensor
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.NXT.Sensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>
            The value as a string
            </returns>
        </member>
        <member name="P:MonoBrick.NXT.Sensor.IsInitialized">
            <summary>
            Gets a value indicating whether the sensor has been initialized.
            </summary>
            <value>
                <c>true</c> if the sensor is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoBrick.NXT.Sensor.SensorDictionary">
            <summary>
            Gets a dictionary of sensors that has been implemented. Can be use in a combobox or simular
            </summary>
            <value>The sensor dictionary.</value>
        </member>
        <member name="T:MonoBrick.NXT.NoSensor">
            <summary>
            When a sensor is not connected use the class to minimize power consumption
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.NoSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.NoSensor" /> class.
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.CustomSensor">
            <summary>
            When a sensor analog sensor is connected
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.CustomSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.CustomSensor" /> class  using custom sensor type and raw mode
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.CustomSensor.#ctor(MonoBrick.NXT.SensorType,MonoBrick.NXT.SensorMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.CustomSensor" /> class.
            </summary>
            <param name="type">
            Sensor type
            </param>
            <param name="mode">
            Sensor mode
            </param>
        </member>
        <member name="M:MonoBrick.NXT.CustomSensor.Read">
            <summary>
            Read the sensor value
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.ColorMode">
            <summary>
            Sensor modes when using a NXT 2.0 color sensor
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.Color">
            <summary>
            Colors that can be read from the  NXT 2.0 color sensor
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.NXTColorSensor">
            <summary>
            NXT 2.0 color sensor.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.NXTColorSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.NXTColorSensor" /> class as a color sensor.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.NXTColorSensor.#ctor(MonoBrick.NXT.SensorMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.NXTColorSensor" /> class as a light sensor.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.NXTColorSensor.#ctor(MonoBrick.NXT.ColorMode,MonoBrick.NXT.SensorMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.NXTColorSensor" /> class.
            </summary>
            <param name="colorMode">The color mode to use</param>
            <param name="mode">The sensor mode to use</param>
        </member>
        <member name="M:MonoBrick.NXT.NXTColorSensor.UseAsColorSensor">
            <summary>
            Set the sensor to be used as a color sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.NXTColorSensor.UseAsLightSensor(MonoBrick.NXT.SensorMode)">
            <summary>
            Set the sensor to be used as a light sensor
            </summary>
        </member>
        <member name="P:MonoBrick.NXT.NXTColorSensor.ColorMode">
            <summary>
            Gets or sets the light mode.
            </summary>
            <value>
            The light mode
            </value>
        </member>
        <member name="P:MonoBrick.NXT.NXTColorSensor.SensorMode">
            <summary>
            Gets or sets the sensor mode.
            </summary>
            <value>
            The sensor mode.
            </value>
        </member>
        <member name="M:MonoBrick.NXT.NXTColorSensor.ReadLightLevel">
            <summary>
            Read the intensity of the reflected light
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.NXTColorSensor.ReadColor">
            <summary>
            Reads the color value
            </summary>
            <returns>The color read from the sensor</returns>
        </member>
        <member name="M:MonoBrick.NXT.NXTColorSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="T:MonoBrick.NXT.LightMode">
            <summary>
            Sensor modes when using a light sensor
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.NXTLightSensor">
            <summary>
            NXT light sensor.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.NXTLightSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.NXTLightSensor" /> class with active light.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.NXTLightSensor.#ctor(MonoBrick.NXT.LightMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.NXTLightSensor" /> class.
            </summary>
            <param name="lightMode">
            Light sensor mode
            </param>
        </member>
        <member name="M:MonoBrick.NXT.NXTLightSensor.#ctor(MonoBrick.NXT.LightMode,MonoBrick.NXT.SensorMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.NXTLightSensor" /> class.
            </summary>
            <param name="lightMode">
            Light sensor mode
            </param>
            <param name="sensorMode">
            Sensor mode. Raw, bool, percent...
            </param>
        </member>
        <member name="P:MonoBrick.NXT.NXTLightSensor.LightMode">
            <summary>
            Gets or sets the light mode.
            </summary>
            <value>
            The light mode
            </value>
        </member>
        <member name="P:MonoBrick.NXT.NXTLightSensor.SensorMode">
            <summary>
            Gets or sets the sensor mode.
            </summary>
            <value>
            The sensor mode.
            </value>
        </member>
        <member name="M:MonoBrick.NXT.NXTLightSensor.ReadLightLevel">
            <summary>
            Read the intensity of the reflected light
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.RCXLightSensor">
            <summary>
            RCX light sensor.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.RCXLightSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.RCXLightSensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.RCXLightSensor.#ctor(MonoBrick.NXT.SensorMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.RCXLightSensor" /> class.
            </summary>
            <param name="sensorMode">
            Sensor mode. Raw, bool, percent...
            </param>
        </member>
        <member name="P:MonoBrick.NXT.RCXLightSensor.SensorMode">
            <summary>
            Gets or sets the sensor mode.
            </summary>
            <value>
            The sensor mode.
            </value>
        </member>
        <member name="M:MonoBrick.NXT.RCXLightSensor.ReadLightLevel">
            <summary>
            Read the intensity of the reflected light
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.RCXRotationSensor">
            <summary>
            RCX rotation sensor.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.RCXRotationSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.RCXRotationSensor" /> class.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.RCXRotationSensor.ReadCount">
            <summary>
            Read the rotation count
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.TemperatureMode">
            <summary>
            Sensor mode when using a temperature sensor
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.TemperatureMode.Celsius">
            <summary>
            Result is in celsius
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.TemperatureMode.Fahrenheit">
            <summary>
            Result is in fahrenheit.
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.RCXTemperatureSensor">
            <summary>
            RCX temperature sensor.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.RCXTemperatureSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.RCXTemperatureSensor" /> class as celsius
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.RCXTemperatureSensor.#ctor(MonoBrick.NXT.TemperatureMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.RCXTemperatureSensor" /> class.
            </summary>
            <param name="temperatureMode">
            Temperature mode
            </param>
        </member>
        <member name="P:MonoBrick.NXT.RCXTemperatureSensor.TemperatureMode">
            <summary>
            Gets or sets the temperature mode.
            </summary>
            <value>
            The temperature mode.
            </value>
        </member>
        <member name="M:MonoBrick.NXT.RCXTemperatureSensor.ReadTemperature">
            <summary>
            Read the temperature
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.SoundMode">
            <summary>
            Sensor mode when using a sound sensor
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.SoundMode.SoundDBA">
            <summary>
            The sound level is measured in A-weighting decibel
            </summary>
        </member>
        <member name="F:MonoBrick.NXT.SoundMode.SoundDB">
            <summary>
            The sound level is measured in decibel
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.NXTSoundSensor">
            <summary>
            NXT sound sensor.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.NXTSoundSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.NXTSoundSensor" /> class in DBA mode.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.NXTSoundSensor.#ctor(MonoBrick.NXT.SoundMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.NXTSoundSensor" /> class.
            </summary>
            <param name="soundMode">
            Sound mode
            </param>
        </member>
        <member name="P:MonoBrick.NXT.NXTSoundSensor.SoundMode">
            <summary>
            Gets or sets the sound mode.
            </summary>
            <value>
            The sound mode.
            </value>
        </member>
        <member name="M:MonoBrick.NXT.NXTSoundSensor.ReadSoundLevel">
            <summary>
            Read the sound level
            </summary>
        </member>
        <member name="T:MonoBrick.NXT.TouchSensor">
            <summary>
            Touch sensor.
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.TouchSensor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.TouchSensor" /> class in bool mode
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.TouchSensor.#ctor(MonoBrick.NXT.SensorMode)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.TouchSensor" /> class.
            </summary>
            <param name="sensorMode">
            Sensor mode. Raw, bool, percent...
            </param>
        </member>
        <member name="P:MonoBrick.NXT.TouchSensor.SensorMode">
            <summary>
            Gets or sets the sensor mode.
            </summary>
            <value>
            The sensor mode.
            </value>
        </member>
        <member name="T:MonoBrick.NXT.HiTecGyro">
            <summary>
            HiTechnic gyro sensor
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecGyro.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.HiTecGyro" /> class without offset
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecGyro.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoBrick.NXT.HiTecGyro" /> class.
            </summary>
            <param name="offset">
            Offset
            </param>
        </member>
        <member name="M:MonoBrick.NXT.HiTecGyro.ReadAngularAcceleration">
            <summary>
            Read angular acceleration
            </summary>
        </member>
        <member name="M:MonoBrick.NXT.HiTecGyro.ReadAsString">
            <summary>
            Reads the angular acceleration as a string.
            </summary>
            <returns>
            The value as a string.
            </returns>
        </member>
        <member name="P:MonoBrick.NXT.HiTecGyro.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="T:MonoBrick.Bluetooth`2">
            <summary>
            Bluetooth connection for use on Windows and MAC
            </summary>
        </member>
        <member name="M:MonoBrick.Bluetooth`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Bluetooth class.
            </summary>
            <param name="comport">he serial port to use</param>
        </member>
        <member name="M:MonoBrick.Bluetooth`2.Send(`0)">
            <summary>
            Send a command
            </summary>
            <param name="command">
            The command to send
            </param>
        </member>
        <member name="M:MonoBrick.Bluetooth`2.Receive">
            <summary>
            Receive a reply
            </summary>
        </member>
        <member name="M:MonoBrick.Bluetooth`2.Open">
            <summary>
            Open connection
            </summary>
        </member>
        <member name="M:MonoBrick.Bluetooth`2.Close">
            <summary>
            Close connection
            </summary>
        </member>
        <member name="M:MonoBrick.Bluetooth`2.GetPortNames">
            <summary>
            Gets a list of available serial ports
            </summary>
            <returns>
            A list of available serial ports
            </returns>
        </member>
        <member name="T:MonoBrick.EV3.MemoryArray`1">
            <summary>
            Class for reading and writing to the bricks memory
            </summary>
        </member>
        <member name="P:MonoBrick.EV3.MemoryArray`1.Handle">
            <summary>
            Gets or sets the handle to the memory array on the brick
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:MonoBrick.EV3.MemoryArray`1.Size">
            <summary>
            Gets the size of the memory array
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:MonoBrick.EV3.MemoryArray`1.Delete">
            <summary>
            Delete the memory array on the brick
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.MemoryArray`1.Write(`0,System.Int32)">
            <summary>
            Write a single value to the EV3's memory
            </summary>
            <param name="value">Value to write</param>
            <param name="memoryIndex">Memory index on the EV3</param>
        </member>
        <member name="M:MonoBrick.EV3.MemoryArray`1.Write(`0[])">
            <summary>
            Write a data array to the bricks memory from index 0
            </summary>
            <param name="data">Data array to write</param>
        </member>
        <member name="M:MonoBrick.EV3.MemoryArray`1.Write(`0[],System.Int32)">
            <summary>
            Write a data array to the bricks memory
            </summary>
            <param name="data">Data array to write</param>
            <param name="memoryIndex">Memory index on the EV3</param>
        </member>
        <member name="M:MonoBrick.EV3.MemoryArray`1.Write(`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Write a data array to the bricks memory
            </summary>
            <param name="data">Data array to write</param>
            <param name="memoryIndex">Memory index on the EV3</param>
            <param name="offset">Offset of the data array</param>
            <param name="length">Length. Number of data elements to write</param>
        </member>
        <member name="M:MonoBrick.EV3.MemoryArray`1.ReadSingleValue(System.Int32)">
            <summary>
            Read a single value from the bricks memory
            </summary>
            <returns>A single value.</returns>
            <param name="memoryIndex">Memory index to read.</param>
        </member>
        <member name="M:MonoBrick.EV3.MemoryArray`1.Read(System.Int32,System.Int32)">
            <summary>
            Read an array from the bricks memory
            </summary>
            <param name="memoryIndex">Memory index.</param>
            <param name="length">Number of elements to read.</param>
        </member>
        <member name="T:MonoBrick.EV3.ByteMemoryArray">
            <summary>
            Class for reading and writing to a byte array in the bricks memory
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.Int16MemoryArray">
            <summary>
            Class for reading and writing to a int16 array in the bricks memory
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.Int32MemoryArray">
            <summary>
            Class for reading and writing to a int32 array in the bricks memory
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.FloatMemoryArray">
            <summary>
            Class for reading and writing to a float array in the bricks memory
            </summary>
        </member>
        <member name="T:MonoBrick.EV3.Memory">
            <summary>
            Memory class for EV3 brick
            </summary>
        </member>
        <member name="M:MonoBrick.EV3.Memory.CreateByteArray(System.Int32)">
            <summary>
            Creates a new byte array on the brick
            </summary>
            <returns>The byte array.</returns>
            <param name="size">Size of the array.</param>
        </member>
        <member name="M:MonoBrick.EV3.Memory.CreateInt16Array(System.Int32)">
            <summary>
            Creates a new int16 array on the brick
            </summary>
            <returns>The int16 array.</returns>
            <param name="size">Size of the array.</param>
        </member>
        <member name="M:MonoBrick.EV3.Memory.CreateInt32Array(System.Int32)">
            <summary>
            Creates a new int32 array on the brick
            </summary>
            <returns>The int32 array.</returns>
            <param name="size">Size of the array.</param>
        </member>
        <member name="M:MonoBrick.EV3.Memory.CreateFloatArray(System.Int32)">
            <summary>
            Creates a new float array on the brick
            </summary>
            <returns>The float array.</returns>
            <param name="size">Size of the array.</param>
        </member>
        <member name="M:MonoBrick.EV3.Memory.GetByteArray(System.Byte)">
            <summary>
            Gets the byte array on the brick
            </summary>
            <returns>The byte array.</returns>
            <param name="handle">Handle to the array on the Brick.</param>
        </member>
        <member name="M:MonoBrick.EV3.Memory.GetInt16Array(System.Byte)">
            <summary>
            Gets the int16 array on the brick
            </summary>
            <returns>The int16 array.</returns>
            <param name="handle">Handle to the array on the Brick.</param>
        </member>
        <member name="M:MonoBrick.EV3.Memory.GetInt32Array(System.Byte)">
            <summary>
            Gets the int32 array on the Brick
            </summary>
            <returns>The int32 array.</returns>
            <param name="handle">Handle to the array on the Brick.</param>
        </member>
        <member name="M:MonoBrick.EV3.Memory.GetFloatArray(System.Byte)">
            <summary>
            Gets the float array on the Brick
            </summary>
            <returns>The float array.</returns>
            <param name="handle">Handle to the array on the Brick.</param>
        </member>
        <member name="M:MonoBrick.EV3.Memory.Write(System.Byte[],MonoBrick.EV3.ProgramSlots)">
            <summary>
            Write the specified data and slot - this is not used hence private
            </summary>
            <param name="data">Data.</param>
            <param name="slot">Slot.</param>
        </member>
        <member name="M:MonoBrick.EV3.Memory.Read">
            <summary>
            Read this instance - this is not used hence private
            </summary>
        </member>
        <member name="T:MonoBrick.IMotor">
            <summary>
            Motor class
            </summary>
        </member>
        <member name="P:MonoBrick.IMotor.Reverse">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MonoBrick.NXT.Motor" /> run in reverse direction
            </summary>
            <value>
                <c>true</c> if reverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoBrick.IMotor.On(System.SByte)">
            <summary>
            Move the motor
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.IMotor.On(System.SByte,System.Boolean)">
            <summary>
            Move the motor
            </summary>
            <param name="speed">
            Speed of the motor -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IMotor.Brake">
            <summary>
            Brake the motor (is still on but does not move)
            </summary>
        </member>
        <member name="M:MonoBrick.IMotor.Brake(System.Boolean)">
            <summary>
            Brake the motor (is still on but does not move)
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IMotor.Off">
            <summary>
            Turn the motor off
            </summary>
        </member>
        <member name="M:MonoBrick.IMotor.Off(System.Boolean)">
            <summary>
            Turn the motor off
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IMotor.ResetTacho">
            <summary>
            Resets the tacho
            </summary>
        </member>
        <member name="M:MonoBrick.IMotor.ResetTacho(System.Boolean)">
            <summary>
            Resets the tacho
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IMotor.GetTachoCount">
            <summary>
            Gets the tacho count.
            </summary>
            <returns>
            The tacho count
            </returns>
        </member>
        <member name="M:MonoBrick.IMotor.IsRunning">
            <summary>
            Determines whether this motor is running.
            </summary>
            <returns>
                <c>true</c> if this motor is running; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoBrick.IVehicle">
            <summary>
            Interface for a vehicle
            </summary>
        </member>
        <member name="P:MonoBrick.IVehicle.ReverseLeft">
            <summary>
            Gets or sets a value indicating whether the left motor is running in reverse direction
            </summary>
            <value>
                <c>true</c> if left motor is reverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoBrick.IVehicle.ReverseRight">
            <summary>
            Gets or sets a value indicating whether the right motor is running in reverse direction
            </summary>
            <value>
                <c>true</c> if right motor is reverse; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoBrick.IVehicle.Backward(System.SByte)">
            <summary>
            Run backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.Backward(System.SByte,System.Boolean)">
            <summary>
            Run backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.Forward(System.SByte)">
            <summary>
            Run forward
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.Forward(System.SByte,System.Boolean)">
            <summary>
            Run forward
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.SpinLeft(System.SByte)">
            <summary>
            Spins the vehicle left.
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.SpinLeft(System.SByte,System.Boolean)">
            <summary>
            Spins the vehicle left.
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.SpinRight(System.SByte)">
            <summary>
            Spins the vehicle right
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.SpinRight(System.SByte,System.Boolean)">
            <summary>
            Spins the vehicle right
            </summary>
            <param name="speed">
            Speed -100 to 100
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.Off(System.Boolean)">
            <summary>
            Stop moving the vehicle
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.Off">
            <summary>
            Stop moving the vehicle
            </summary>
        </member>
        <member name="M:MonoBrick.IVehicle.Brake">
            <summary>
            Brake the vehicle (the motor is still on but it does not move)
            </summary>
        </member>
        <member name="M:MonoBrick.IVehicle.Brake(System.Boolean)">
            <summary>
            Brake the vehicle (the motor is still on but it does not move)
            </summary>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.TurnRightForward(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle right
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.TurnRightForward(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle right
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.TurnRightReverse(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle right will moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.TurnRightReverse(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle right will moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.TurnLeftForward(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle left
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.TurnLeftForward(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle left
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.TurnLeftReverse(System.SByte,System.SByte)">
            <summary>
            Turns the vehicle left will moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
        </member>
        <member name="M:MonoBrick.IVehicle.TurnLeftReverse(System.SByte,System.SByte,System.Boolean)">
            <summary>
            Turns the vehicle left will moving backwards
            </summary>
            <param name="speed">
            Speed of the vehicle -100 to 100
            </param>
            <param name="turnPercent">
            Turn percent.
            </param>
            <param name="reply">
            If set to <c>true</c> the brick will send a reply
            </param>
        </member>
        <member name="T:MonoBrick.ISensor">
            <summary>
            Interface for a sensor
            </summary>
        </member>
        <member name="M:MonoBrick.ISensor.Initialize">
            <summary>
            Initialize this sensor
            </summary>
        </member>
        <member name="M:MonoBrick.ISensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>
            The value as a string
            </returns>
        </member>
    </members>
</doc>
